// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/09/2024 18:07:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    dynamics_top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dynamics_top_vlg_sample_tst(
	clock_fpga,
	level,
	reset,
	shift_minus,
	shift_plus,
	shoot,
	shoot_type,
	sampler_tx
);
input  clock_fpga;
input [1:0] level;
input  reset;
input  shift_minus;
input  shift_plus;
input  shoot;
input [1:0] shoot_type;
output sampler_tx;

reg sample;
time current_time;
always @(clock_fpga or level or reset or shift_minus or shift_plus or shoot or shoot_type)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module dynamics_top_vlg_check_tst (
	alien_1_angle_output,
	alien_1_can_out,
	alien_1_quantization,
	alien_1_type_output,
	alien_2_angle_output,
	alien_2_can_out,
	alien_2_quantization,
	alien_2_type_output,
	alien_3_angle_output,
	alien_3_can_out,
	alien_3_quantization,
	alien_3_type_output,
	alien_4_angle_output,
	alien_4_can_out,
	alien_4_quantization,
	alien_4_type_output,
	alien_5_angle_output,
	alien_5_can_out,
	alien_5_quantization,
	alien_5_type_output,
	alien_6_angle_output,
	alien_6_can_out,
	alien_6_quantization,
	alien_6_type_output,
	alien_7_angle_output,
	alien_7_can_out,
	alien_7_quantization,
	alien_7_type_output,
	alien_8_angle_output,
	alien_8_can_out,
	alien_8_quantization,
	alien_8_type_output,
	alien_alive_dead,
	game_over,
	rocket_angle,
	sample_total,
	score,
	sampler_rx
);
input [3:0] alien_1_angle_output;
input [2:0] alien_1_can_out;
input [4:0] alien_1_quantization;
input [2:0] alien_1_type_output;
input [3:0] alien_2_angle_output;
input [2:0] alien_2_can_out;
input [4:0] alien_2_quantization;
input [2:0] alien_2_type_output;
input [3:0] alien_3_angle_output;
input [2:0] alien_3_can_out;
input [4:0] alien_3_quantization;
input [2:0] alien_3_type_output;
input [3:0] alien_4_angle_output;
input [2:0] alien_4_can_out;
input [4:0] alien_4_quantization;
input [2:0] alien_4_type_output;
input [3:0] alien_5_angle_output;
input [2:0] alien_5_can_out;
input [4:0] alien_5_quantization;
input [2:0] alien_5_type_output;
input [3:0] alien_6_angle_output;
input [2:0] alien_6_can_out;
input [4:0] alien_6_quantization;
input [2:0] alien_6_type_output;
input [3:0] alien_7_angle_output;
input [2:0] alien_7_can_out;
input [4:0] alien_7_quantization;
input [2:0] alien_7_type_output;
input [3:0] alien_8_angle_output;
input [2:0] alien_8_can_out;
input [4:0] alien_8_quantization;
input [2:0] alien_8_type_output;
input [7:0] alien_alive_dead;
input  game_over;
input [3:0] rocket_angle;
input [2:0] sample_total;
input [6:0] score;
input sampler_rx;

reg [3:0] alien_1_angle_output_expected;
reg [2:0] alien_1_can_out_expected;
reg [4:0] alien_1_quantization_expected;
reg [2:0] alien_1_type_output_expected;
reg [3:0] alien_2_angle_output_expected;
reg [2:0] alien_2_can_out_expected;
reg [4:0] alien_2_quantization_expected;
reg [2:0] alien_2_type_output_expected;
reg [3:0] alien_3_angle_output_expected;
reg [2:0] alien_3_can_out_expected;
reg [4:0] alien_3_quantization_expected;
reg [2:0] alien_3_type_output_expected;
reg [3:0] alien_4_angle_output_expected;
reg [2:0] alien_4_can_out_expected;
reg [4:0] alien_4_quantization_expected;
reg [2:0] alien_4_type_output_expected;
reg [3:0] alien_5_angle_output_expected;
reg [2:0] alien_5_can_out_expected;
reg [4:0] alien_5_quantization_expected;
reg [2:0] alien_5_type_output_expected;
reg [3:0] alien_6_angle_output_expected;
reg [2:0] alien_6_can_out_expected;
reg [4:0] alien_6_quantization_expected;
reg [2:0] alien_6_type_output_expected;
reg [3:0] alien_7_angle_output_expected;
reg [2:0] alien_7_can_out_expected;
reg [4:0] alien_7_quantization_expected;
reg [2:0] alien_7_type_output_expected;
reg [3:0] alien_8_angle_output_expected;
reg [2:0] alien_8_can_out_expected;
reg [4:0] alien_8_quantization_expected;
reg [2:0] alien_8_type_output_expected;
reg [7:0] alien_alive_dead_expected;
reg  game_over_expected;
reg [3:0] rocket_angle_expected;
reg [2:0] sample_total_expected;
reg [6:0] score_expected;

reg [3:0] alien_1_angle_output_prev;
reg [2:0] alien_1_can_out_prev;
reg [4:0] alien_1_quantization_prev;
reg [2:0] alien_1_type_output_prev;
reg [3:0] alien_2_angle_output_prev;
reg [2:0] alien_2_can_out_prev;
reg [4:0] alien_2_quantization_prev;
reg [2:0] alien_2_type_output_prev;
reg [3:0] alien_3_angle_output_prev;
reg [2:0] alien_3_can_out_prev;
reg [4:0] alien_3_quantization_prev;
reg [2:0] alien_3_type_output_prev;
reg [3:0] alien_4_angle_output_prev;
reg [2:0] alien_4_can_out_prev;
reg [4:0] alien_4_quantization_prev;
reg [2:0] alien_4_type_output_prev;
reg [3:0] alien_5_angle_output_prev;
reg [2:0] alien_5_can_out_prev;
reg [4:0] alien_5_quantization_prev;
reg [2:0] alien_5_type_output_prev;
reg [3:0] alien_6_angle_output_prev;
reg [2:0] alien_6_can_out_prev;
reg [4:0] alien_6_quantization_prev;
reg [2:0] alien_6_type_output_prev;
reg [3:0] alien_7_angle_output_prev;
reg [2:0] alien_7_can_out_prev;
reg [4:0] alien_7_quantization_prev;
reg [2:0] alien_7_type_output_prev;
reg [3:0] alien_8_angle_output_prev;
reg [2:0] alien_8_can_out_prev;
reg [4:0] alien_8_quantization_prev;
reg [2:0] alien_8_type_output_prev;
reg [7:0] alien_alive_dead_prev;
reg  game_over_prev;
reg [3:0] rocket_angle_prev;
reg [2:0] sample_total_prev;
reg [6:0] score_prev;

reg [3:0] alien_1_angle_output_expected_prev;
reg [2:0] alien_1_can_out_expected_prev;
reg [4:0] alien_1_quantization_expected_prev;
reg [2:0] alien_1_type_output_expected_prev;
reg [3:0] alien_2_angle_output_expected_prev;
reg [2:0] alien_2_can_out_expected_prev;
reg [4:0] alien_2_quantization_expected_prev;
reg [2:0] alien_2_type_output_expected_prev;
reg [3:0] alien_3_angle_output_expected_prev;
reg [2:0] alien_3_can_out_expected_prev;
reg [4:0] alien_3_quantization_expected_prev;
reg [2:0] alien_3_type_output_expected_prev;
reg [3:0] alien_4_angle_output_expected_prev;
reg [2:0] alien_4_can_out_expected_prev;
reg [4:0] alien_4_quantization_expected_prev;
reg [2:0] alien_4_type_output_expected_prev;
reg [3:0] alien_5_angle_output_expected_prev;
reg [2:0] alien_5_can_out_expected_prev;
reg [4:0] alien_5_quantization_expected_prev;
reg [2:0] alien_5_type_output_expected_prev;
reg [3:0] alien_6_angle_output_expected_prev;
reg [2:0] alien_6_can_out_expected_prev;
reg [4:0] alien_6_quantization_expected_prev;
reg [2:0] alien_6_type_output_expected_prev;
reg [3:0] alien_7_angle_output_expected_prev;
reg [2:0] alien_7_can_out_expected_prev;
reg [4:0] alien_7_quantization_expected_prev;
reg [2:0] alien_7_type_output_expected_prev;
reg [3:0] alien_8_angle_output_expected_prev;
reg [2:0] alien_8_can_out_expected_prev;
reg [4:0] alien_8_quantization_expected_prev;
reg [2:0] alien_8_type_output_expected_prev;
reg [7:0] alien_alive_dead_expected_prev;
reg  game_over_expected_prev;
reg [3:0] rocket_angle_expected_prev;
reg [2:0] sample_total_expected_prev;
reg [6:0] score_expected_prev;

reg [3:0] last_alien_1_angle_output_exp;
reg [2:0] last_alien_1_can_out_exp;
reg [4:0] last_alien_1_quantization_exp;
reg [2:0] last_alien_1_type_output_exp;
reg [3:0] last_alien_2_angle_output_exp;
reg [2:0] last_alien_2_can_out_exp;
reg [4:0] last_alien_2_quantization_exp;
reg [2:0] last_alien_2_type_output_exp;
reg [3:0] last_alien_3_angle_output_exp;
reg [2:0] last_alien_3_can_out_exp;
reg [4:0] last_alien_3_quantization_exp;
reg [2:0] last_alien_3_type_output_exp;
reg [3:0] last_alien_4_angle_output_exp;
reg [2:0] last_alien_4_can_out_exp;
reg [4:0] last_alien_4_quantization_exp;
reg [2:0] last_alien_4_type_output_exp;
reg [3:0] last_alien_5_angle_output_exp;
reg [2:0] last_alien_5_can_out_exp;
reg [4:0] last_alien_5_quantization_exp;
reg [2:0] last_alien_5_type_output_exp;
reg [3:0] last_alien_6_angle_output_exp;
reg [2:0] last_alien_6_can_out_exp;
reg [4:0] last_alien_6_quantization_exp;
reg [2:0] last_alien_6_type_output_exp;
reg [3:0] last_alien_7_angle_output_exp;
reg [2:0] last_alien_7_can_out_exp;
reg [4:0] last_alien_7_quantization_exp;
reg [2:0] last_alien_7_type_output_exp;
reg [3:0] last_alien_8_angle_output_exp;
reg [2:0] last_alien_8_can_out_exp;
reg [4:0] last_alien_8_quantization_exp;
reg [2:0] last_alien_8_type_output_exp;
reg [7:0] last_alien_alive_dead_exp;
reg  last_game_over_exp;
reg [3:0] last_rocket_angle_exp;
reg [2:0] last_sample_total_exp;
reg [6:0] last_score_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:37] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 37'b1;
end

// update real /o prevs

always @(trigger)
begin
	alien_1_angle_output_prev = alien_1_angle_output;
	alien_1_can_out_prev = alien_1_can_out;
	alien_1_quantization_prev = alien_1_quantization;
	alien_1_type_output_prev = alien_1_type_output;
	alien_2_angle_output_prev = alien_2_angle_output;
	alien_2_can_out_prev = alien_2_can_out;
	alien_2_quantization_prev = alien_2_quantization;
	alien_2_type_output_prev = alien_2_type_output;
	alien_3_angle_output_prev = alien_3_angle_output;
	alien_3_can_out_prev = alien_3_can_out;
	alien_3_quantization_prev = alien_3_quantization;
	alien_3_type_output_prev = alien_3_type_output;
	alien_4_angle_output_prev = alien_4_angle_output;
	alien_4_can_out_prev = alien_4_can_out;
	alien_4_quantization_prev = alien_4_quantization;
	alien_4_type_output_prev = alien_4_type_output;
	alien_5_angle_output_prev = alien_5_angle_output;
	alien_5_can_out_prev = alien_5_can_out;
	alien_5_quantization_prev = alien_5_quantization;
	alien_5_type_output_prev = alien_5_type_output;
	alien_6_angle_output_prev = alien_6_angle_output;
	alien_6_can_out_prev = alien_6_can_out;
	alien_6_quantization_prev = alien_6_quantization;
	alien_6_type_output_prev = alien_6_type_output;
	alien_7_angle_output_prev = alien_7_angle_output;
	alien_7_can_out_prev = alien_7_can_out;
	alien_7_quantization_prev = alien_7_quantization;
	alien_7_type_output_prev = alien_7_type_output;
	alien_8_angle_output_prev = alien_8_angle_output;
	alien_8_can_out_prev = alien_8_can_out;
	alien_8_quantization_prev = alien_8_quantization;
	alien_8_type_output_prev = alien_8_type_output;
	alien_alive_dead_prev = alien_alive_dead;
	game_over_prev = game_over;
	rocket_angle_prev = rocket_angle;
	sample_total_prev = sample_total;
	score_prev = score;
end

// update expected /o prevs

always @(trigger)
begin
	alien_1_angle_output_expected_prev = alien_1_angle_output_expected;
	alien_1_can_out_expected_prev = alien_1_can_out_expected;
	alien_1_quantization_expected_prev = alien_1_quantization_expected;
	alien_1_type_output_expected_prev = alien_1_type_output_expected;
	alien_2_angle_output_expected_prev = alien_2_angle_output_expected;
	alien_2_can_out_expected_prev = alien_2_can_out_expected;
	alien_2_quantization_expected_prev = alien_2_quantization_expected;
	alien_2_type_output_expected_prev = alien_2_type_output_expected;
	alien_3_angle_output_expected_prev = alien_3_angle_output_expected;
	alien_3_can_out_expected_prev = alien_3_can_out_expected;
	alien_3_quantization_expected_prev = alien_3_quantization_expected;
	alien_3_type_output_expected_prev = alien_3_type_output_expected;
	alien_4_angle_output_expected_prev = alien_4_angle_output_expected;
	alien_4_can_out_expected_prev = alien_4_can_out_expected;
	alien_4_quantization_expected_prev = alien_4_quantization_expected;
	alien_4_type_output_expected_prev = alien_4_type_output_expected;
	alien_5_angle_output_expected_prev = alien_5_angle_output_expected;
	alien_5_can_out_expected_prev = alien_5_can_out_expected;
	alien_5_quantization_expected_prev = alien_5_quantization_expected;
	alien_5_type_output_expected_prev = alien_5_type_output_expected;
	alien_6_angle_output_expected_prev = alien_6_angle_output_expected;
	alien_6_can_out_expected_prev = alien_6_can_out_expected;
	alien_6_quantization_expected_prev = alien_6_quantization_expected;
	alien_6_type_output_expected_prev = alien_6_type_output_expected;
	alien_7_angle_output_expected_prev = alien_7_angle_output_expected;
	alien_7_can_out_expected_prev = alien_7_can_out_expected;
	alien_7_quantization_expected_prev = alien_7_quantization_expected;
	alien_7_type_output_expected_prev = alien_7_type_output_expected;
	alien_8_angle_output_expected_prev = alien_8_angle_output_expected;
	alien_8_can_out_expected_prev = alien_8_can_out_expected;
	alien_8_quantization_expected_prev = alien_8_quantization_expected;
	alien_8_type_output_expected_prev = alien_8_type_output_expected;
	alien_alive_dead_expected_prev = alien_alive_dead_expected;
	game_over_expected_prev = game_over_expected;
	rocket_angle_expected_prev = rocket_angle_expected;
	sample_total_expected_prev = sample_total_expected;
	score_expected_prev = score_expected;
end


// expected alien_1_angle_output[ 3 ]
initial
begin
	alien_1_angle_output_expected[3] = 1'bX;
end 
// expected alien_1_angle_output[ 2 ]
initial
begin
	alien_1_angle_output_expected[2] = 1'bX;
end 
// expected alien_1_angle_output[ 1 ]
initial
begin
	alien_1_angle_output_expected[1] = 1'bX;
end 
// expected alien_1_angle_output[ 0 ]
initial
begin
	alien_1_angle_output_expected[0] = 1'bX;
end 
// expected alien_1_can_out[ 2 ]
initial
begin
	alien_1_can_out_expected[2] = 1'bX;
end 
// expected alien_1_can_out[ 1 ]
initial
begin
	alien_1_can_out_expected[1] = 1'bX;
end 
// expected alien_1_can_out[ 0 ]
initial
begin
	alien_1_can_out_expected[0] = 1'bX;
end 
// expected alien_1_quantization[ 4 ]
initial
begin
	alien_1_quantization_expected[4] = 1'bX;
end 
// expected alien_1_quantization[ 3 ]
initial
begin
	alien_1_quantization_expected[3] = 1'bX;
end 
// expected alien_1_quantization[ 2 ]
initial
begin
	alien_1_quantization_expected[2] = 1'bX;
end 
// expected alien_1_quantization[ 1 ]
initial
begin
	alien_1_quantization_expected[1] = 1'bX;
end 
// expected alien_1_quantization[ 0 ]
initial
begin
	alien_1_quantization_expected[0] = 1'bX;
end 
// expected alien_1_type_output[ 2 ]
initial
begin
	alien_1_type_output_expected[2] = 1'bX;
end 
// expected alien_1_type_output[ 1 ]
initial
begin
	alien_1_type_output_expected[1] = 1'bX;
end 
// expected alien_1_type_output[ 0 ]
initial
begin
	alien_1_type_output_expected[0] = 1'bX;
end 
// expected alien_2_angle_output[ 3 ]
initial
begin
	alien_2_angle_output_expected[3] = 1'bX;
end 
// expected alien_2_angle_output[ 2 ]
initial
begin
	alien_2_angle_output_expected[2] = 1'bX;
end 
// expected alien_2_angle_output[ 1 ]
initial
begin
	alien_2_angle_output_expected[1] = 1'bX;
end 
// expected alien_2_angle_output[ 0 ]
initial
begin
	alien_2_angle_output_expected[0] = 1'bX;
end 
// expected alien_2_can_out[ 2 ]
initial
begin
	alien_2_can_out_expected[2] = 1'bX;
end 
// expected alien_2_can_out[ 1 ]
initial
begin
	alien_2_can_out_expected[1] = 1'bX;
end 
// expected alien_2_can_out[ 0 ]
initial
begin
	alien_2_can_out_expected[0] = 1'bX;
end 
// expected alien_2_quantization[ 4 ]
initial
begin
	alien_2_quantization_expected[4] = 1'bX;
end 
// expected alien_2_quantization[ 3 ]
initial
begin
	alien_2_quantization_expected[3] = 1'bX;
end 
// expected alien_2_quantization[ 2 ]
initial
begin
	alien_2_quantization_expected[2] = 1'bX;
end 
// expected alien_2_quantization[ 1 ]
initial
begin
	alien_2_quantization_expected[1] = 1'bX;
end 
// expected alien_2_quantization[ 0 ]
initial
begin
	alien_2_quantization_expected[0] = 1'bX;
end 
// expected alien_2_type_output[ 2 ]
initial
begin
	alien_2_type_output_expected[2] = 1'bX;
end 
// expected alien_2_type_output[ 1 ]
initial
begin
	alien_2_type_output_expected[1] = 1'bX;
end 
// expected alien_2_type_output[ 0 ]
initial
begin
	alien_2_type_output_expected[0] = 1'bX;
end 
// expected alien_3_angle_output[ 3 ]
initial
begin
	alien_3_angle_output_expected[3] = 1'bX;
end 
// expected alien_3_angle_output[ 2 ]
initial
begin
	alien_3_angle_output_expected[2] = 1'bX;
end 
// expected alien_3_angle_output[ 1 ]
initial
begin
	alien_3_angle_output_expected[1] = 1'bX;
end 
// expected alien_3_angle_output[ 0 ]
initial
begin
	alien_3_angle_output_expected[0] = 1'bX;
end 
// expected alien_3_can_out[ 2 ]
initial
begin
	alien_3_can_out_expected[2] = 1'bX;
end 
// expected alien_3_can_out[ 1 ]
initial
begin
	alien_3_can_out_expected[1] = 1'bX;
end 
// expected alien_3_can_out[ 0 ]
initial
begin
	alien_3_can_out_expected[0] = 1'bX;
end 
// expected alien_3_quantization[ 4 ]
initial
begin
	alien_3_quantization_expected[4] = 1'bX;
end 
// expected alien_3_quantization[ 3 ]
initial
begin
	alien_3_quantization_expected[3] = 1'bX;
end 
// expected alien_3_quantization[ 2 ]
initial
begin
	alien_3_quantization_expected[2] = 1'bX;
end 
// expected alien_3_quantization[ 1 ]
initial
begin
	alien_3_quantization_expected[1] = 1'bX;
end 
// expected alien_3_quantization[ 0 ]
initial
begin
	alien_3_quantization_expected[0] = 1'bX;
end 
// expected alien_3_type_output[ 2 ]
initial
begin
	alien_3_type_output_expected[2] = 1'bX;
end 
// expected alien_3_type_output[ 1 ]
initial
begin
	alien_3_type_output_expected[1] = 1'bX;
end 
// expected alien_3_type_output[ 0 ]
initial
begin
	alien_3_type_output_expected[0] = 1'bX;
end 
// expected alien_4_angle_output[ 3 ]
initial
begin
	alien_4_angle_output_expected[3] = 1'bX;
end 
// expected alien_4_angle_output[ 2 ]
initial
begin
	alien_4_angle_output_expected[2] = 1'bX;
end 
// expected alien_4_angle_output[ 1 ]
initial
begin
	alien_4_angle_output_expected[1] = 1'bX;
end 
// expected alien_4_angle_output[ 0 ]
initial
begin
	alien_4_angle_output_expected[0] = 1'bX;
end 
// expected alien_4_can_out[ 2 ]
initial
begin
	alien_4_can_out_expected[2] = 1'bX;
end 
// expected alien_4_can_out[ 1 ]
initial
begin
	alien_4_can_out_expected[1] = 1'bX;
end 
// expected alien_4_can_out[ 0 ]
initial
begin
	alien_4_can_out_expected[0] = 1'bX;
end 
// expected alien_4_quantization[ 4 ]
initial
begin
	alien_4_quantization_expected[4] = 1'bX;
end 
// expected alien_4_quantization[ 3 ]
initial
begin
	alien_4_quantization_expected[3] = 1'bX;
end 
// expected alien_4_quantization[ 2 ]
initial
begin
	alien_4_quantization_expected[2] = 1'bX;
end 
// expected alien_4_quantization[ 1 ]
initial
begin
	alien_4_quantization_expected[1] = 1'bX;
end 
// expected alien_4_quantization[ 0 ]
initial
begin
	alien_4_quantization_expected[0] = 1'bX;
end 
// expected alien_4_type_output[ 2 ]
initial
begin
	alien_4_type_output_expected[2] = 1'bX;
end 
// expected alien_4_type_output[ 1 ]
initial
begin
	alien_4_type_output_expected[1] = 1'bX;
end 
// expected alien_4_type_output[ 0 ]
initial
begin
	alien_4_type_output_expected[0] = 1'bX;
end 
// expected alien_5_angle_output[ 3 ]
initial
begin
	alien_5_angle_output_expected[3] = 1'bX;
end 
// expected alien_5_angle_output[ 2 ]
initial
begin
	alien_5_angle_output_expected[2] = 1'bX;
end 
// expected alien_5_angle_output[ 1 ]
initial
begin
	alien_5_angle_output_expected[1] = 1'bX;
end 
// expected alien_5_angle_output[ 0 ]
initial
begin
	alien_5_angle_output_expected[0] = 1'bX;
end 
// expected alien_5_can_out[ 2 ]
initial
begin
	alien_5_can_out_expected[2] = 1'bX;
end 
// expected alien_5_can_out[ 1 ]
initial
begin
	alien_5_can_out_expected[1] = 1'bX;
end 
// expected alien_5_can_out[ 0 ]
initial
begin
	alien_5_can_out_expected[0] = 1'bX;
end 
// expected alien_5_quantization[ 4 ]
initial
begin
	alien_5_quantization_expected[4] = 1'bX;
end 
// expected alien_5_quantization[ 3 ]
initial
begin
	alien_5_quantization_expected[3] = 1'bX;
end 
// expected alien_5_quantization[ 2 ]
initial
begin
	alien_5_quantization_expected[2] = 1'bX;
end 
// expected alien_5_quantization[ 1 ]
initial
begin
	alien_5_quantization_expected[1] = 1'bX;
end 
// expected alien_5_quantization[ 0 ]
initial
begin
	alien_5_quantization_expected[0] = 1'bX;
end 
// expected alien_5_type_output[ 2 ]
initial
begin
	alien_5_type_output_expected[2] = 1'bX;
end 
// expected alien_5_type_output[ 1 ]
initial
begin
	alien_5_type_output_expected[1] = 1'bX;
end 
// expected alien_5_type_output[ 0 ]
initial
begin
	alien_5_type_output_expected[0] = 1'bX;
end 
// expected alien_6_angle_output[ 3 ]
initial
begin
	alien_6_angle_output_expected[3] = 1'bX;
end 
// expected alien_6_angle_output[ 2 ]
initial
begin
	alien_6_angle_output_expected[2] = 1'bX;
end 
// expected alien_6_angle_output[ 1 ]
initial
begin
	alien_6_angle_output_expected[1] = 1'bX;
end 
// expected alien_6_angle_output[ 0 ]
initial
begin
	alien_6_angle_output_expected[0] = 1'bX;
end 
// expected alien_6_can_out[ 2 ]
initial
begin
	alien_6_can_out_expected[2] = 1'bX;
end 
// expected alien_6_can_out[ 1 ]
initial
begin
	alien_6_can_out_expected[1] = 1'bX;
end 
// expected alien_6_can_out[ 0 ]
initial
begin
	alien_6_can_out_expected[0] = 1'bX;
end 
// expected alien_6_quantization[ 4 ]
initial
begin
	alien_6_quantization_expected[4] = 1'bX;
end 
// expected alien_6_quantization[ 3 ]
initial
begin
	alien_6_quantization_expected[3] = 1'bX;
end 
// expected alien_6_quantization[ 2 ]
initial
begin
	alien_6_quantization_expected[2] = 1'bX;
end 
// expected alien_6_quantization[ 1 ]
initial
begin
	alien_6_quantization_expected[1] = 1'bX;
end 
// expected alien_6_quantization[ 0 ]
initial
begin
	alien_6_quantization_expected[0] = 1'bX;
end 
// expected alien_6_type_output[ 2 ]
initial
begin
	alien_6_type_output_expected[2] = 1'bX;
end 
// expected alien_6_type_output[ 1 ]
initial
begin
	alien_6_type_output_expected[1] = 1'bX;
end 
// expected alien_6_type_output[ 0 ]
initial
begin
	alien_6_type_output_expected[0] = 1'bX;
end 
// expected alien_7_angle_output[ 3 ]
initial
begin
	alien_7_angle_output_expected[3] = 1'bX;
end 
// expected alien_7_angle_output[ 2 ]
initial
begin
	alien_7_angle_output_expected[2] = 1'bX;
end 
// expected alien_7_angle_output[ 1 ]
initial
begin
	alien_7_angle_output_expected[1] = 1'bX;
end 
// expected alien_7_angle_output[ 0 ]
initial
begin
	alien_7_angle_output_expected[0] = 1'bX;
end 
// expected alien_7_can_out[ 2 ]
initial
begin
	alien_7_can_out_expected[2] = 1'bX;
end 
// expected alien_7_can_out[ 1 ]
initial
begin
	alien_7_can_out_expected[1] = 1'bX;
end 
// expected alien_7_can_out[ 0 ]
initial
begin
	alien_7_can_out_expected[0] = 1'bX;
end 
// expected alien_7_quantization[ 4 ]
initial
begin
	alien_7_quantization_expected[4] = 1'bX;
end 
// expected alien_7_quantization[ 3 ]
initial
begin
	alien_7_quantization_expected[3] = 1'bX;
end 
// expected alien_7_quantization[ 2 ]
initial
begin
	alien_7_quantization_expected[2] = 1'bX;
end 
// expected alien_7_quantization[ 1 ]
initial
begin
	alien_7_quantization_expected[1] = 1'bX;
end 
// expected alien_7_quantization[ 0 ]
initial
begin
	alien_7_quantization_expected[0] = 1'bX;
end 
// expected alien_7_type_output[ 2 ]
initial
begin
	alien_7_type_output_expected[2] = 1'bX;
end 
// expected alien_7_type_output[ 1 ]
initial
begin
	alien_7_type_output_expected[1] = 1'bX;
end 
// expected alien_7_type_output[ 0 ]
initial
begin
	alien_7_type_output_expected[0] = 1'bX;
end 
// expected alien_8_angle_output[ 3 ]
initial
begin
	alien_8_angle_output_expected[3] = 1'bX;
end 
// expected alien_8_angle_output[ 2 ]
initial
begin
	alien_8_angle_output_expected[2] = 1'bX;
end 
// expected alien_8_angle_output[ 1 ]
initial
begin
	alien_8_angle_output_expected[1] = 1'bX;
end 
// expected alien_8_angle_output[ 0 ]
initial
begin
	alien_8_angle_output_expected[0] = 1'bX;
end 
// expected alien_8_can_out[ 2 ]
initial
begin
	alien_8_can_out_expected[2] = 1'bX;
end 
// expected alien_8_can_out[ 1 ]
initial
begin
	alien_8_can_out_expected[1] = 1'bX;
end 
// expected alien_8_can_out[ 0 ]
initial
begin
	alien_8_can_out_expected[0] = 1'bX;
end 
// expected alien_8_quantization[ 4 ]
initial
begin
	alien_8_quantization_expected[4] = 1'bX;
end 
// expected alien_8_quantization[ 3 ]
initial
begin
	alien_8_quantization_expected[3] = 1'bX;
end 
// expected alien_8_quantization[ 2 ]
initial
begin
	alien_8_quantization_expected[2] = 1'bX;
end 
// expected alien_8_quantization[ 1 ]
initial
begin
	alien_8_quantization_expected[1] = 1'bX;
end 
// expected alien_8_quantization[ 0 ]
initial
begin
	alien_8_quantization_expected[0] = 1'bX;
end 
// expected alien_8_type_output[ 2 ]
initial
begin
	alien_8_type_output_expected[2] = 1'bX;
end 
// expected alien_8_type_output[ 1 ]
initial
begin
	alien_8_type_output_expected[1] = 1'bX;
end 
// expected alien_8_type_output[ 0 ]
initial
begin
	alien_8_type_output_expected[0] = 1'bX;
end 
// expected alien_alive_dead[ 7 ]
initial
begin
	alien_alive_dead_expected[7] = 1'bX;
end 
// expected alien_alive_dead[ 6 ]
initial
begin
	alien_alive_dead_expected[6] = 1'bX;
end 
// expected alien_alive_dead[ 5 ]
initial
begin
	alien_alive_dead_expected[5] = 1'bX;
end 
// expected alien_alive_dead[ 4 ]
initial
begin
	alien_alive_dead_expected[4] = 1'bX;
end 
// expected alien_alive_dead[ 3 ]
initial
begin
	alien_alive_dead_expected[3] = 1'bX;
end 
// expected alien_alive_dead[ 2 ]
initial
begin
	alien_alive_dead_expected[2] = 1'bX;
end 
// expected alien_alive_dead[ 1 ]
initial
begin
	alien_alive_dead_expected[1] = 1'bX;
end 
// expected alien_alive_dead[ 0 ]
initial
begin
	alien_alive_dead_expected[0] = 1'bX;
end 

// expected game_over
initial
begin
	game_over_expected = 1'bX;
end 
// expected rocket_angle[ 3 ]
initial
begin
	rocket_angle_expected[3] = 1'bX;
end 
// expected rocket_angle[ 2 ]
initial
begin
	rocket_angle_expected[2] = 1'bX;
end 
// expected rocket_angle[ 1 ]
initial
begin
	rocket_angle_expected[1] = 1'bX;
end 
// expected rocket_angle[ 0 ]
initial
begin
	rocket_angle_expected[0] = 1'bX;
end 
// expected sample_total[ 2 ]
initial
begin
	sample_total_expected[2] = 1'bX;
end 
// expected sample_total[ 1 ]
initial
begin
	sample_total_expected[1] = 1'bX;
end 
// expected sample_total[ 0 ]
initial
begin
	sample_total_expected[0] = 1'bX;
end 
// expected score[ 6 ]
initial
begin
	score_expected[6] = 1'bX;
end 
// expected score[ 5 ]
initial
begin
	score_expected[5] = 1'bX;
end 
// expected score[ 4 ]
initial
begin
	score_expected[4] = 1'bX;
end 
// expected score[ 3 ]
initial
begin
	score_expected[3] = 1'bX;
end 
// expected score[ 2 ]
initial
begin
	score_expected[2] = 1'bX;
end 
// expected score[ 1 ]
initial
begin
	score_expected[1] = 1'bX;
end 
// expected score[ 0 ]
initial
begin
	score_expected[0] = 1'bX;
end 
// generate trigger
always @(alien_1_angle_output_expected or alien_1_angle_output or alien_1_can_out_expected or alien_1_can_out or alien_1_quantization_expected or alien_1_quantization or alien_1_type_output_expected or alien_1_type_output or alien_2_angle_output_expected or alien_2_angle_output or alien_2_can_out_expected or alien_2_can_out or alien_2_quantization_expected or alien_2_quantization or alien_2_type_output_expected or alien_2_type_output or alien_3_angle_output_expected or alien_3_angle_output or alien_3_can_out_expected or alien_3_can_out or alien_3_quantization_expected or alien_3_quantization or alien_3_type_output_expected or alien_3_type_output or alien_4_angle_output_expected or alien_4_angle_output or alien_4_can_out_expected or alien_4_can_out or alien_4_quantization_expected or alien_4_quantization or alien_4_type_output_expected or alien_4_type_output or alien_5_angle_output_expected or alien_5_angle_output or alien_5_can_out_expected or alien_5_can_out or alien_5_quantization_expected or alien_5_quantization or alien_5_type_output_expected or alien_5_type_output or alien_6_angle_output_expected or alien_6_angle_output or alien_6_can_out_expected or alien_6_can_out or alien_6_quantization_expected or alien_6_quantization or alien_6_type_output_expected or alien_6_type_output or alien_7_angle_output_expected or alien_7_angle_output or alien_7_can_out_expected or alien_7_can_out or alien_7_quantization_expected or alien_7_quantization or alien_7_type_output_expected or alien_7_type_output or alien_8_angle_output_expected or alien_8_angle_output or alien_8_can_out_expected or alien_8_can_out or alien_8_quantization_expected or alien_8_quantization or alien_8_type_output_expected or alien_8_type_output or alien_alive_dead_expected or alien_alive_dead or game_over_expected or game_over or rocket_angle_expected or rocket_angle or sample_total_expected or sample_total or score_expected or score)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alien_1_angle_output = %b | expected alien_1_can_out = %b | expected alien_1_quantization = %b | expected alien_1_type_output = %b | expected alien_2_angle_output = %b | expected alien_2_can_out = %b | expected alien_2_quantization = %b | expected alien_2_type_output = %b | expected alien_3_angle_output = %b | expected alien_3_can_out = %b | expected alien_3_quantization = %b | expected alien_3_type_output = %b | expected alien_4_angle_output = %b | expected alien_4_can_out = %b | expected alien_4_quantization = %b | expected alien_4_type_output = %b | expected alien_5_angle_output = %b | expected alien_5_can_out = %b | expected alien_5_quantization = %b | expected alien_5_type_output = %b | expected alien_6_angle_output = %b | expected alien_6_can_out = %b | expected alien_6_quantization = %b | expected alien_6_type_output = %b | expected alien_7_angle_output = %b | expected alien_7_can_out = %b | expected alien_7_quantization = %b | expected alien_7_type_output = %b | expected alien_8_angle_output = %b | expected alien_8_can_out = %b | expected alien_8_quantization = %b | expected alien_8_type_output = %b | expected alien_alive_dead = %b | expected game_over = %b | expected rocket_angle = %b | expected sample_total = %b | expected score = %b | ",alien_1_angle_output_expected_prev,alien_1_can_out_expected_prev,alien_1_quantization_expected_prev,alien_1_type_output_expected_prev,alien_2_angle_output_expected_prev,alien_2_can_out_expected_prev,alien_2_quantization_expected_prev,alien_2_type_output_expected_prev,alien_3_angle_output_expected_prev,alien_3_can_out_expected_prev,alien_3_quantization_expected_prev,alien_3_type_output_expected_prev,alien_4_angle_output_expected_prev,alien_4_can_out_expected_prev,alien_4_quantization_expected_prev,alien_4_type_output_expected_prev,alien_5_angle_output_expected_prev,alien_5_can_out_expected_prev,alien_5_quantization_expected_prev,alien_5_type_output_expected_prev,alien_6_angle_output_expected_prev,alien_6_can_out_expected_prev,alien_6_quantization_expected_prev,alien_6_type_output_expected_prev,alien_7_angle_output_expected_prev,alien_7_can_out_expected_prev,alien_7_quantization_expected_prev,alien_7_type_output_expected_prev,alien_8_angle_output_expected_prev,alien_8_can_out_expected_prev,alien_8_quantization_expected_prev,alien_8_type_output_expected_prev,alien_alive_dead_expected_prev,game_over_expected_prev,rocket_angle_expected_prev,sample_total_expected_prev,score_expected_prev);
	$display("| real alien_1_angle_output = %b | real alien_1_can_out = %b | real alien_1_quantization = %b | real alien_1_type_output = %b | real alien_2_angle_output = %b | real alien_2_can_out = %b | real alien_2_quantization = %b | real alien_2_type_output = %b | real alien_3_angle_output = %b | real alien_3_can_out = %b | real alien_3_quantization = %b | real alien_3_type_output = %b | real alien_4_angle_output = %b | real alien_4_can_out = %b | real alien_4_quantization = %b | real alien_4_type_output = %b | real alien_5_angle_output = %b | real alien_5_can_out = %b | real alien_5_quantization = %b | real alien_5_type_output = %b | real alien_6_angle_output = %b | real alien_6_can_out = %b | real alien_6_quantization = %b | real alien_6_type_output = %b | real alien_7_angle_output = %b | real alien_7_can_out = %b | real alien_7_quantization = %b | real alien_7_type_output = %b | real alien_8_angle_output = %b | real alien_8_can_out = %b | real alien_8_quantization = %b | real alien_8_type_output = %b | real alien_alive_dead = %b | real game_over = %b | real rocket_angle = %b | real sample_total = %b | real score = %b | ",alien_1_angle_output_prev,alien_1_can_out_prev,alien_1_quantization_prev,alien_1_type_output_prev,alien_2_angle_output_prev,alien_2_can_out_prev,alien_2_quantization_prev,alien_2_type_output_prev,alien_3_angle_output_prev,alien_3_can_out_prev,alien_3_quantization_prev,alien_3_type_output_prev,alien_4_angle_output_prev,alien_4_can_out_prev,alien_4_quantization_prev,alien_4_type_output_prev,alien_5_angle_output_prev,alien_5_can_out_prev,alien_5_quantization_prev,alien_5_type_output_prev,alien_6_angle_output_prev,alien_6_can_out_prev,alien_6_quantization_prev,alien_6_type_output_prev,alien_7_angle_output_prev,alien_7_can_out_prev,alien_7_quantization_prev,alien_7_type_output_prev,alien_8_angle_output_prev,alien_8_can_out_prev,alien_8_quantization_prev,alien_8_type_output_prev,alien_alive_dead_prev,game_over_prev,rocket_angle_prev,sample_total_prev,score_prev);
`endif
	if (
		( alien_1_angle_output_expected_prev[0] !== 1'bx ) && ( alien_1_angle_output_prev[0] !== alien_1_angle_output_expected_prev[0] )
		&& ((alien_1_angle_output_expected_prev[0] !== last_alien_1_angle_output_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_1_angle_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_1_angle_output_expected_prev);
		$display ("     Real value = %b", alien_1_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alien_1_angle_output_exp[0] = alien_1_angle_output_expected_prev[0];
	end
	if (
		( alien_1_angle_output_expected_prev[1] !== 1'bx ) && ( alien_1_angle_output_prev[1] !== alien_1_angle_output_expected_prev[1] )
		&& ((alien_1_angle_output_expected_prev[1] !== last_alien_1_angle_output_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_1_angle_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_1_angle_output_expected_prev);
		$display ("     Real value = %b", alien_1_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alien_1_angle_output_exp[1] = alien_1_angle_output_expected_prev[1];
	end
	if (
		( alien_1_angle_output_expected_prev[2] !== 1'bx ) && ( alien_1_angle_output_prev[2] !== alien_1_angle_output_expected_prev[2] )
		&& ((alien_1_angle_output_expected_prev[2] !== last_alien_1_angle_output_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_1_angle_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_1_angle_output_expected_prev);
		$display ("     Real value = %b", alien_1_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alien_1_angle_output_exp[2] = alien_1_angle_output_expected_prev[2];
	end
	if (
		( alien_1_angle_output_expected_prev[3] !== 1'bx ) && ( alien_1_angle_output_prev[3] !== alien_1_angle_output_expected_prev[3] )
		&& ((alien_1_angle_output_expected_prev[3] !== last_alien_1_angle_output_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_1_angle_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_1_angle_output_expected_prev);
		$display ("     Real value = %b", alien_1_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alien_1_angle_output_exp[3] = alien_1_angle_output_expected_prev[3];
	end
	if (
		( alien_1_can_out_expected_prev[0] !== 1'bx ) && ( alien_1_can_out_prev[0] !== alien_1_can_out_expected_prev[0] )
		&& ((alien_1_can_out_expected_prev[0] !== last_alien_1_can_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_1_can_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_1_can_out_expected_prev);
		$display ("     Real value = %b", alien_1_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alien_1_can_out_exp[0] = alien_1_can_out_expected_prev[0];
	end
	if (
		( alien_1_can_out_expected_prev[1] !== 1'bx ) && ( alien_1_can_out_prev[1] !== alien_1_can_out_expected_prev[1] )
		&& ((alien_1_can_out_expected_prev[1] !== last_alien_1_can_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_1_can_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_1_can_out_expected_prev);
		$display ("     Real value = %b", alien_1_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alien_1_can_out_exp[1] = alien_1_can_out_expected_prev[1];
	end
	if (
		( alien_1_can_out_expected_prev[2] !== 1'bx ) && ( alien_1_can_out_prev[2] !== alien_1_can_out_expected_prev[2] )
		&& ((alien_1_can_out_expected_prev[2] !== last_alien_1_can_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_1_can_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_1_can_out_expected_prev);
		$display ("     Real value = %b", alien_1_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alien_1_can_out_exp[2] = alien_1_can_out_expected_prev[2];
	end
	if (
		( alien_1_quantization_expected_prev[0] !== 1'bx ) && ( alien_1_quantization_prev[0] !== alien_1_quantization_expected_prev[0] )
		&& ((alien_1_quantization_expected_prev[0] !== last_alien_1_quantization_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_1_quantization[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_1_quantization_expected_prev);
		$display ("     Real value = %b", alien_1_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alien_1_quantization_exp[0] = alien_1_quantization_expected_prev[0];
	end
	if (
		( alien_1_quantization_expected_prev[1] !== 1'bx ) && ( alien_1_quantization_prev[1] !== alien_1_quantization_expected_prev[1] )
		&& ((alien_1_quantization_expected_prev[1] !== last_alien_1_quantization_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_1_quantization[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_1_quantization_expected_prev);
		$display ("     Real value = %b", alien_1_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alien_1_quantization_exp[1] = alien_1_quantization_expected_prev[1];
	end
	if (
		( alien_1_quantization_expected_prev[2] !== 1'bx ) && ( alien_1_quantization_prev[2] !== alien_1_quantization_expected_prev[2] )
		&& ((alien_1_quantization_expected_prev[2] !== last_alien_1_quantization_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_1_quantization[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_1_quantization_expected_prev);
		$display ("     Real value = %b", alien_1_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alien_1_quantization_exp[2] = alien_1_quantization_expected_prev[2];
	end
	if (
		( alien_1_quantization_expected_prev[3] !== 1'bx ) && ( alien_1_quantization_prev[3] !== alien_1_quantization_expected_prev[3] )
		&& ((alien_1_quantization_expected_prev[3] !== last_alien_1_quantization_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_1_quantization[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_1_quantization_expected_prev);
		$display ("     Real value = %b", alien_1_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alien_1_quantization_exp[3] = alien_1_quantization_expected_prev[3];
	end
	if (
		( alien_1_quantization_expected_prev[4] !== 1'bx ) && ( alien_1_quantization_prev[4] !== alien_1_quantization_expected_prev[4] )
		&& ((alien_1_quantization_expected_prev[4] !== last_alien_1_quantization_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_1_quantization[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_1_quantization_expected_prev);
		$display ("     Real value = %b", alien_1_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alien_1_quantization_exp[4] = alien_1_quantization_expected_prev[4];
	end
	if (
		( alien_1_type_output_expected_prev[0] !== 1'bx ) && ( alien_1_type_output_prev[0] !== alien_1_type_output_expected_prev[0] )
		&& ((alien_1_type_output_expected_prev[0] !== last_alien_1_type_output_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_1_type_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_1_type_output_expected_prev);
		$display ("     Real value = %b", alien_1_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_alien_1_type_output_exp[0] = alien_1_type_output_expected_prev[0];
	end
	if (
		( alien_1_type_output_expected_prev[1] !== 1'bx ) && ( alien_1_type_output_prev[1] !== alien_1_type_output_expected_prev[1] )
		&& ((alien_1_type_output_expected_prev[1] !== last_alien_1_type_output_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_1_type_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_1_type_output_expected_prev);
		$display ("     Real value = %b", alien_1_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_alien_1_type_output_exp[1] = alien_1_type_output_expected_prev[1];
	end
	if (
		( alien_1_type_output_expected_prev[2] !== 1'bx ) && ( alien_1_type_output_prev[2] !== alien_1_type_output_expected_prev[2] )
		&& ((alien_1_type_output_expected_prev[2] !== last_alien_1_type_output_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_1_type_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_1_type_output_expected_prev);
		$display ("     Real value = %b", alien_1_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_alien_1_type_output_exp[2] = alien_1_type_output_expected_prev[2];
	end
	if (
		( alien_2_angle_output_expected_prev[0] !== 1'bx ) && ( alien_2_angle_output_prev[0] !== alien_2_angle_output_expected_prev[0] )
		&& ((alien_2_angle_output_expected_prev[0] !== last_alien_2_angle_output_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_2_angle_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_2_angle_output_expected_prev);
		$display ("     Real value = %b", alien_2_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_alien_2_angle_output_exp[0] = alien_2_angle_output_expected_prev[0];
	end
	if (
		( alien_2_angle_output_expected_prev[1] !== 1'bx ) && ( alien_2_angle_output_prev[1] !== alien_2_angle_output_expected_prev[1] )
		&& ((alien_2_angle_output_expected_prev[1] !== last_alien_2_angle_output_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_2_angle_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_2_angle_output_expected_prev);
		$display ("     Real value = %b", alien_2_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_alien_2_angle_output_exp[1] = alien_2_angle_output_expected_prev[1];
	end
	if (
		( alien_2_angle_output_expected_prev[2] !== 1'bx ) && ( alien_2_angle_output_prev[2] !== alien_2_angle_output_expected_prev[2] )
		&& ((alien_2_angle_output_expected_prev[2] !== last_alien_2_angle_output_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_2_angle_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_2_angle_output_expected_prev);
		$display ("     Real value = %b", alien_2_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_alien_2_angle_output_exp[2] = alien_2_angle_output_expected_prev[2];
	end
	if (
		( alien_2_angle_output_expected_prev[3] !== 1'bx ) && ( alien_2_angle_output_prev[3] !== alien_2_angle_output_expected_prev[3] )
		&& ((alien_2_angle_output_expected_prev[3] !== last_alien_2_angle_output_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_2_angle_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_2_angle_output_expected_prev);
		$display ("     Real value = %b", alien_2_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_alien_2_angle_output_exp[3] = alien_2_angle_output_expected_prev[3];
	end
	if (
		( alien_2_can_out_expected_prev[0] !== 1'bx ) && ( alien_2_can_out_prev[0] !== alien_2_can_out_expected_prev[0] )
		&& ((alien_2_can_out_expected_prev[0] !== last_alien_2_can_out_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_2_can_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_2_can_out_expected_prev);
		$display ("     Real value = %b", alien_2_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_alien_2_can_out_exp[0] = alien_2_can_out_expected_prev[0];
	end
	if (
		( alien_2_can_out_expected_prev[1] !== 1'bx ) && ( alien_2_can_out_prev[1] !== alien_2_can_out_expected_prev[1] )
		&& ((alien_2_can_out_expected_prev[1] !== last_alien_2_can_out_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_2_can_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_2_can_out_expected_prev);
		$display ("     Real value = %b", alien_2_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_alien_2_can_out_exp[1] = alien_2_can_out_expected_prev[1];
	end
	if (
		( alien_2_can_out_expected_prev[2] !== 1'bx ) && ( alien_2_can_out_prev[2] !== alien_2_can_out_expected_prev[2] )
		&& ((alien_2_can_out_expected_prev[2] !== last_alien_2_can_out_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_2_can_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_2_can_out_expected_prev);
		$display ("     Real value = %b", alien_2_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_alien_2_can_out_exp[2] = alien_2_can_out_expected_prev[2];
	end
	if (
		( alien_2_quantization_expected_prev[0] !== 1'bx ) && ( alien_2_quantization_prev[0] !== alien_2_quantization_expected_prev[0] )
		&& ((alien_2_quantization_expected_prev[0] !== last_alien_2_quantization_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_2_quantization[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_2_quantization_expected_prev);
		$display ("     Real value = %b", alien_2_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_alien_2_quantization_exp[0] = alien_2_quantization_expected_prev[0];
	end
	if (
		( alien_2_quantization_expected_prev[1] !== 1'bx ) && ( alien_2_quantization_prev[1] !== alien_2_quantization_expected_prev[1] )
		&& ((alien_2_quantization_expected_prev[1] !== last_alien_2_quantization_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_2_quantization[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_2_quantization_expected_prev);
		$display ("     Real value = %b", alien_2_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_alien_2_quantization_exp[1] = alien_2_quantization_expected_prev[1];
	end
	if (
		( alien_2_quantization_expected_prev[2] !== 1'bx ) && ( alien_2_quantization_prev[2] !== alien_2_quantization_expected_prev[2] )
		&& ((alien_2_quantization_expected_prev[2] !== last_alien_2_quantization_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_2_quantization[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_2_quantization_expected_prev);
		$display ("     Real value = %b", alien_2_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_alien_2_quantization_exp[2] = alien_2_quantization_expected_prev[2];
	end
	if (
		( alien_2_quantization_expected_prev[3] !== 1'bx ) && ( alien_2_quantization_prev[3] !== alien_2_quantization_expected_prev[3] )
		&& ((alien_2_quantization_expected_prev[3] !== last_alien_2_quantization_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_2_quantization[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_2_quantization_expected_prev);
		$display ("     Real value = %b", alien_2_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_alien_2_quantization_exp[3] = alien_2_quantization_expected_prev[3];
	end
	if (
		( alien_2_quantization_expected_prev[4] !== 1'bx ) && ( alien_2_quantization_prev[4] !== alien_2_quantization_expected_prev[4] )
		&& ((alien_2_quantization_expected_prev[4] !== last_alien_2_quantization_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_2_quantization[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_2_quantization_expected_prev);
		$display ("     Real value = %b", alien_2_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_alien_2_quantization_exp[4] = alien_2_quantization_expected_prev[4];
	end
	if (
		( alien_2_type_output_expected_prev[0] !== 1'bx ) && ( alien_2_type_output_prev[0] !== alien_2_type_output_expected_prev[0] )
		&& ((alien_2_type_output_expected_prev[0] !== last_alien_2_type_output_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_2_type_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_2_type_output_expected_prev);
		$display ("     Real value = %b", alien_2_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_alien_2_type_output_exp[0] = alien_2_type_output_expected_prev[0];
	end
	if (
		( alien_2_type_output_expected_prev[1] !== 1'bx ) && ( alien_2_type_output_prev[1] !== alien_2_type_output_expected_prev[1] )
		&& ((alien_2_type_output_expected_prev[1] !== last_alien_2_type_output_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_2_type_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_2_type_output_expected_prev);
		$display ("     Real value = %b", alien_2_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_alien_2_type_output_exp[1] = alien_2_type_output_expected_prev[1];
	end
	if (
		( alien_2_type_output_expected_prev[2] !== 1'bx ) && ( alien_2_type_output_prev[2] !== alien_2_type_output_expected_prev[2] )
		&& ((alien_2_type_output_expected_prev[2] !== last_alien_2_type_output_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_2_type_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_2_type_output_expected_prev);
		$display ("     Real value = %b", alien_2_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_alien_2_type_output_exp[2] = alien_2_type_output_expected_prev[2];
	end
	if (
		( alien_3_angle_output_expected_prev[0] !== 1'bx ) && ( alien_3_angle_output_prev[0] !== alien_3_angle_output_expected_prev[0] )
		&& ((alien_3_angle_output_expected_prev[0] !== last_alien_3_angle_output_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_3_angle_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_3_angle_output_expected_prev);
		$display ("     Real value = %b", alien_3_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_alien_3_angle_output_exp[0] = alien_3_angle_output_expected_prev[0];
	end
	if (
		( alien_3_angle_output_expected_prev[1] !== 1'bx ) && ( alien_3_angle_output_prev[1] !== alien_3_angle_output_expected_prev[1] )
		&& ((alien_3_angle_output_expected_prev[1] !== last_alien_3_angle_output_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_3_angle_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_3_angle_output_expected_prev);
		$display ("     Real value = %b", alien_3_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_alien_3_angle_output_exp[1] = alien_3_angle_output_expected_prev[1];
	end
	if (
		( alien_3_angle_output_expected_prev[2] !== 1'bx ) && ( alien_3_angle_output_prev[2] !== alien_3_angle_output_expected_prev[2] )
		&& ((alien_3_angle_output_expected_prev[2] !== last_alien_3_angle_output_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_3_angle_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_3_angle_output_expected_prev);
		$display ("     Real value = %b", alien_3_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_alien_3_angle_output_exp[2] = alien_3_angle_output_expected_prev[2];
	end
	if (
		( alien_3_angle_output_expected_prev[3] !== 1'bx ) && ( alien_3_angle_output_prev[3] !== alien_3_angle_output_expected_prev[3] )
		&& ((alien_3_angle_output_expected_prev[3] !== last_alien_3_angle_output_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_3_angle_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_3_angle_output_expected_prev);
		$display ("     Real value = %b", alien_3_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_alien_3_angle_output_exp[3] = alien_3_angle_output_expected_prev[3];
	end
	if (
		( alien_3_can_out_expected_prev[0] !== 1'bx ) && ( alien_3_can_out_prev[0] !== alien_3_can_out_expected_prev[0] )
		&& ((alien_3_can_out_expected_prev[0] !== last_alien_3_can_out_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_3_can_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_3_can_out_expected_prev);
		$display ("     Real value = %b", alien_3_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_alien_3_can_out_exp[0] = alien_3_can_out_expected_prev[0];
	end
	if (
		( alien_3_can_out_expected_prev[1] !== 1'bx ) && ( alien_3_can_out_prev[1] !== alien_3_can_out_expected_prev[1] )
		&& ((alien_3_can_out_expected_prev[1] !== last_alien_3_can_out_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_3_can_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_3_can_out_expected_prev);
		$display ("     Real value = %b", alien_3_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_alien_3_can_out_exp[1] = alien_3_can_out_expected_prev[1];
	end
	if (
		( alien_3_can_out_expected_prev[2] !== 1'bx ) && ( alien_3_can_out_prev[2] !== alien_3_can_out_expected_prev[2] )
		&& ((alien_3_can_out_expected_prev[2] !== last_alien_3_can_out_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_3_can_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_3_can_out_expected_prev);
		$display ("     Real value = %b", alien_3_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_alien_3_can_out_exp[2] = alien_3_can_out_expected_prev[2];
	end
	if (
		( alien_3_quantization_expected_prev[0] !== 1'bx ) && ( alien_3_quantization_prev[0] !== alien_3_quantization_expected_prev[0] )
		&& ((alien_3_quantization_expected_prev[0] !== last_alien_3_quantization_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_3_quantization[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_3_quantization_expected_prev);
		$display ("     Real value = %b", alien_3_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_alien_3_quantization_exp[0] = alien_3_quantization_expected_prev[0];
	end
	if (
		( alien_3_quantization_expected_prev[1] !== 1'bx ) && ( alien_3_quantization_prev[1] !== alien_3_quantization_expected_prev[1] )
		&& ((alien_3_quantization_expected_prev[1] !== last_alien_3_quantization_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_3_quantization[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_3_quantization_expected_prev);
		$display ("     Real value = %b", alien_3_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_alien_3_quantization_exp[1] = alien_3_quantization_expected_prev[1];
	end
	if (
		( alien_3_quantization_expected_prev[2] !== 1'bx ) && ( alien_3_quantization_prev[2] !== alien_3_quantization_expected_prev[2] )
		&& ((alien_3_quantization_expected_prev[2] !== last_alien_3_quantization_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_3_quantization[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_3_quantization_expected_prev);
		$display ("     Real value = %b", alien_3_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_alien_3_quantization_exp[2] = alien_3_quantization_expected_prev[2];
	end
	if (
		( alien_3_quantization_expected_prev[3] !== 1'bx ) && ( alien_3_quantization_prev[3] !== alien_3_quantization_expected_prev[3] )
		&& ((alien_3_quantization_expected_prev[3] !== last_alien_3_quantization_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_3_quantization[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_3_quantization_expected_prev);
		$display ("     Real value = %b", alien_3_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_alien_3_quantization_exp[3] = alien_3_quantization_expected_prev[3];
	end
	if (
		( alien_3_quantization_expected_prev[4] !== 1'bx ) && ( alien_3_quantization_prev[4] !== alien_3_quantization_expected_prev[4] )
		&& ((alien_3_quantization_expected_prev[4] !== last_alien_3_quantization_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_3_quantization[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_3_quantization_expected_prev);
		$display ("     Real value = %b", alien_3_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_alien_3_quantization_exp[4] = alien_3_quantization_expected_prev[4];
	end
	if (
		( alien_3_type_output_expected_prev[0] !== 1'bx ) && ( alien_3_type_output_prev[0] !== alien_3_type_output_expected_prev[0] )
		&& ((alien_3_type_output_expected_prev[0] !== last_alien_3_type_output_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_3_type_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_3_type_output_expected_prev);
		$display ("     Real value = %b", alien_3_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_alien_3_type_output_exp[0] = alien_3_type_output_expected_prev[0];
	end
	if (
		( alien_3_type_output_expected_prev[1] !== 1'bx ) && ( alien_3_type_output_prev[1] !== alien_3_type_output_expected_prev[1] )
		&& ((alien_3_type_output_expected_prev[1] !== last_alien_3_type_output_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_3_type_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_3_type_output_expected_prev);
		$display ("     Real value = %b", alien_3_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_alien_3_type_output_exp[1] = alien_3_type_output_expected_prev[1];
	end
	if (
		( alien_3_type_output_expected_prev[2] !== 1'bx ) && ( alien_3_type_output_prev[2] !== alien_3_type_output_expected_prev[2] )
		&& ((alien_3_type_output_expected_prev[2] !== last_alien_3_type_output_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_3_type_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_3_type_output_expected_prev);
		$display ("     Real value = %b", alien_3_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_alien_3_type_output_exp[2] = alien_3_type_output_expected_prev[2];
	end
	if (
		( alien_4_angle_output_expected_prev[0] !== 1'bx ) && ( alien_4_angle_output_prev[0] !== alien_4_angle_output_expected_prev[0] )
		&& ((alien_4_angle_output_expected_prev[0] !== last_alien_4_angle_output_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_4_angle_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_4_angle_output_expected_prev);
		$display ("     Real value = %b", alien_4_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_alien_4_angle_output_exp[0] = alien_4_angle_output_expected_prev[0];
	end
	if (
		( alien_4_angle_output_expected_prev[1] !== 1'bx ) && ( alien_4_angle_output_prev[1] !== alien_4_angle_output_expected_prev[1] )
		&& ((alien_4_angle_output_expected_prev[1] !== last_alien_4_angle_output_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_4_angle_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_4_angle_output_expected_prev);
		$display ("     Real value = %b", alien_4_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_alien_4_angle_output_exp[1] = alien_4_angle_output_expected_prev[1];
	end
	if (
		( alien_4_angle_output_expected_prev[2] !== 1'bx ) && ( alien_4_angle_output_prev[2] !== alien_4_angle_output_expected_prev[2] )
		&& ((alien_4_angle_output_expected_prev[2] !== last_alien_4_angle_output_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_4_angle_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_4_angle_output_expected_prev);
		$display ("     Real value = %b", alien_4_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_alien_4_angle_output_exp[2] = alien_4_angle_output_expected_prev[2];
	end
	if (
		( alien_4_angle_output_expected_prev[3] !== 1'bx ) && ( alien_4_angle_output_prev[3] !== alien_4_angle_output_expected_prev[3] )
		&& ((alien_4_angle_output_expected_prev[3] !== last_alien_4_angle_output_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_4_angle_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_4_angle_output_expected_prev);
		$display ("     Real value = %b", alien_4_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_alien_4_angle_output_exp[3] = alien_4_angle_output_expected_prev[3];
	end
	if (
		( alien_4_can_out_expected_prev[0] !== 1'bx ) && ( alien_4_can_out_prev[0] !== alien_4_can_out_expected_prev[0] )
		&& ((alien_4_can_out_expected_prev[0] !== last_alien_4_can_out_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_4_can_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_4_can_out_expected_prev);
		$display ("     Real value = %b", alien_4_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_alien_4_can_out_exp[0] = alien_4_can_out_expected_prev[0];
	end
	if (
		( alien_4_can_out_expected_prev[1] !== 1'bx ) && ( alien_4_can_out_prev[1] !== alien_4_can_out_expected_prev[1] )
		&& ((alien_4_can_out_expected_prev[1] !== last_alien_4_can_out_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_4_can_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_4_can_out_expected_prev);
		$display ("     Real value = %b", alien_4_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_alien_4_can_out_exp[1] = alien_4_can_out_expected_prev[1];
	end
	if (
		( alien_4_can_out_expected_prev[2] !== 1'bx ) && ( alien_4_can_out_prev[2] !== alien_4_can_out_expected_prev[2] )
		&& ((alien_4_can_out_expected_prev[2] !== last_alien_4_can_out_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_4_can_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_4_can_out_expected_prev);
		$display ("     Real value = %b", alien_4_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_alien_4_can_out_exp[2] = alien_4_can_out_expected_prev[2];
	end
	if (
		( alien_4_quantization_expected_prev[0] !== 1'bx ) && ( alien_4_quantization_prev[0] !== alien_4_quantization_expected_prev[0] )
		&& ((alien_4_quantization_expected_prev[0] !== last_alien_4_quantization_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_4_quantization[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_4_quantization_expected_prev);
		$display ("     Real value = %b", alien_4_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_alien_4_quantization_exp[0] = alien_4_quantization_expected_prev[0];
	end
	if (
		( alien_4_quantization_expected_prev[1] !== 1'bx ) && ( alien_4_quantization_prev[1] !== alien_4_quantization_expected_prev[1] )
		&& ((alien_4_quantization_expected_prev[1] !== last_alien_4_quantization_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_4_quantization[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_4_quantization_expected_prev);
		$display ("     Real value = %b", alien_4_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_alien_4_quantization_exp[1] = alien_4_quantization_expected_prev[1];
	end
	if (
		( alien_4_quantization_expected_prev[2] !== 1'bx ) && ( alien_4_quantization_prev[2] !== alien_4_quantization_expected_prev[2] )
		&& ((alien_4_quantization_expected_prev[2] !== last_alien_4_quantization_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_4_quantization[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_4_quantization_expected_prev);
		$display ("     Real value = %b", alien_4_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_alien_4_quantization_exp[2] = alien_4_quantization_expected_prev[2];
	end
	if (
		( alien_4_quantization_expected_prev[3] !== 1'bx ) && ( alien_4_quantization_prev[3] !== alien_4_quantization_expected_prev[3] )
		&& ((alien_4_quantization_expected_prev[3] !== last_alien_4_quantization_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_4_quantization[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_4_quantization_expected_prev);
		$display ("     Real value = %b", alien_4_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_alien_4_quantization_exp[3] = alien_4_quantization_expected_prev[3];
	end
	if (
		( alien_4_quantization_expected_prev[4] !== 1'bx ) && ( alien_4_quantization_prev[4] !== alien_4_quantization_expected_prev[4] )
		&& ((alien_4_quantization_expected_prev[4] !== last_alien_4_quantization_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_4_quantization[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_4_quantization_expected_prev);
		$display ("     Real value = %b", alien_4_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_alien_4_quantization_exp[4] = alien_4_quantization_expected_prev[4];
	end
	if (
		( alien_4_type_output_expected_prev[0] !== 1'bx ) && ( alien_4_type_output_prev[0] !== alien_4_type_output_expected_prev[0] )
		&& ((alien_4_type_output_expected_prev[0] !== last_alien_4_type_output_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_4_type_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_4_type_output_expected_prev);
		$display ("     Real value = %b", alien_4_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_alien_4_type_output_exp[0] = alien_4_type_output_expected_prev[0];
	end
	if (
		( alien_4_type_output_expected_prev[1] !== 1'bx ) && ( alien_4_type_output_prev[1] !== alien_4_type_output_expected_prev[1] )
		&& ((alien_4_type_output_expected_prev[1] !== last_alien_4_type_output_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_4_type_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_4_type_output_expected_prev);
		$display ("     Real value = %b", alien_4_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_alien_4_type_output_exp[1] = alien_4_type_output_expected_prev[1];
	end
	if (
		( alien_4_type_output_expected_prev[2] !== 1'bx ) && ( alien_4_type_output_prev[2] !== alien_4_type_output_expected_prev[2] )
		&& ((alien_4_type_output_expected_prev[2] !== last_alien_4_type_output_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_4_type_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_4_type_output_expected_prev);
		$display ("     Real value = %b", alien_4_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_alien_4_type_output_exp[2] = alien_4_type_output_expected_prev[2];
	end
	if (
		( alien_5_angle_output_expected_prev[0] !== 1'bx ) && ( alien_5_angle_output_prev[0] !== alien_5_angle_output_expected_prev[0] )
		&& ((alien_5_angle_output_expected_prev[0] !== last_alien_5_angle_output_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_5_angle_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_5_angle_output_expected_prev);
		$display ("     Real value = %b", alien_5_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_alien_5_angle_output_exp[0] = alien_5_angle_output_expected_prev[0];
	end
	if (
		( alien_5_angle_output_expected_prev[1] !== 1'bx ) && ( alien_5_angle_output_prev[1] !== alien_5_angle_output_expected_prev[1] )
		&& ((alien_5_angle_output_expected_prev[1] !== last_alien_5_angle_output_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_5_angle_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_5_angle_output_expected_prev);
		$display ("     Real value = %b", alien_5_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_alien_5_angle_output_exp[1] = alien_5_angle_output_expected_prev[1];
	end
	if (
		( alien_5_angle_output_expected_prev[2] !== 1'bx ) && ( alien_5_angle_output_prev[2] !== alien_5_angle_output_expected_prev[2] )
		&& ((alien_5_angle_output_expected_prev[2] !== last_alien_5_angle_output_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_5_angle_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_5_angle_output_expected_prev);
		$display ("     Real value = %b", alien_5_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_alien_5_angle_output_exp[2] = alien_5_angle_output_expected_prev[2];
	end
	if (
		( alien_5_angle_output_expected_prev[3] !== 1'bx ) && ( alien_5_angle_output_prev[3] !== alien_5_angle_output_expected_prev[3] )
		&& ((alien_5_angle_output_expected_prev[3] !== last_alien_5_angle_output_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_5_angle_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_5_angle_output_expected_prev);
		$display ("     Real value = %b", alien_5_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_alien_5_angle_output_exp[3] = alien_5_angle_output_expected_prev[3];
	end
	if (
		( alien_5_can_out_expected_prev[0] !== 1'bx ) && ( alien_5_can_out_prev[0] !== alien_5_can_out_expected_prev[0] )
		&& ((alien_5_can_out_expected_prev[0] !== last_alien_5_can_out_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_5_can_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_5_can_out_expected_prev);
		$display ("     Real value = %b", alien_5_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_alien_5_can_out_exp[0] = alien_5_can_out_expected_prev[0];
	end
	if (
		( alien_5_can_out_expected_prev[1] !== 1'bx ) && ( alien_5_can_out_prev[1] !== alien_5_can_out_expected_prev[1] )
		&& ((alien_5_can_out_expected_prev[1] !== last_alien_5_can_out_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_5_can_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_5_can_out_expected_prev);
		$display ("     Real value = %b", alien_5_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_alien_5_can_out_exp[1] = alien_5_can_out_expected_prev[1];
	end
	if (
		( alien_5_can_out_expected_prev[2] !== 1'bx ) && ( alien_5_can_out_prev[2] !== alien_5_can_out_expected_prev[2] )
		&& ((alien_5_can_out_expected_prev[2] !== last_alien_5_can_out_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_5_can_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_5_can_out_expected_prev);
		$display ("     Real value = %b", alien_5_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_alien_5_can_out_exp[2] = alien_5_can_out_expected_prev[2];
	end
	if (
		( alien_5_quantization_expected_prev[0] !== 1'bx ) && ( alien_5_quantization_prev[0] !== alien_5_quantization_expected_prev[0] )
		&& ((alien_5_quantization_expected_prev[0] !== last_alien_5_quantization_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_5_quantization[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_5_quantization_expected_prev);
		$display ("     Real value = %b", alien_5_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_alien_5_quantization_exp[0] = alien_5_quantization_expected_prev[0];
	end
	if (
		( alien_5_quantization_expected_prev[1] !== 1'bx ) && ( alien_5_quantization_prev[1] !== alien_5_quantization_expected_prev[1] )
		&& ((alien_5_quantization_expected_prev[1] !== last_alien_5_quantization_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_5_quantization[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_5_quantization_expected_prev);
		$display ("     Real value = %b", alien_5_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_alien_5_quantization_exp[1] = alien_5_quantization_expected_prev[1];
	end
	if (
		( alien_5_quantization_expected_prev[2] !== 1'bx ) && ( alien_5_quantization_prev[2] !== alien_5_quantization_expected_prev[2] )
		&& ((alien_5_quantization_expected_prev[2] !== last_alien_5_quantization_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_5_quantization[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_5_quantization_expected_prev);
		$display ("     Real value = %b", alien_5_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_alien_5_quantization_exp[2] = alien_5_quantization_expected_prev[2];
	end
	if (
		( alien_5_quantization_expected_prev[3] !== 1'bx ) && ( alien_5_quantization_prev[3] !== alien_5_quantization_expected_prev[3] )
		&& ((alien_5_quantization_expected_prev[3] !== last_alien_5_quantization_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_5_quantization[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_5_quantization_expected_prev);
		$display ("     Real value = %b", alien_5_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_alien_5_quantization_exp[3] = alien_5_quantization_expected_prev[3];
	end
	if (
		( alien_5_quantization_expected_prev[4] !== 1'bx ) && ( alien_5_quantization_prev[4] !== alien_5_quantization_expected_prev[4] )
		&& ((alien_5_quantization_expected_prev[4] !== last_alien_5_quantization_exp[4]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_5_quantization[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_5_quantization_expected_prev);
		$display ("     Real value = %b", alien_5_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_alien_5_quantization_exp[4] = alien_5_quantization_expected_prev[4];
	end
	if (
		( alien_5_type_output_expected_prev[0] !== 1'bx ) && ( alien_5_type_output_prev[0] !== alien_5_type_output_expected_prev[0] )
		&& ((alien_5_type_output_expected_prev[0] !== last_alien_5_type_output_exp[0]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_5_type_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_5_type_output_expected_prev);
		$display ("     Real value = %b", alien_5_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_alien_5_type_output_exp[0] = alien_5_type_output_expected_prev[0];
	end
	if (
		( alien_5_type_output_expected_prev[1] !== 1'bx ) && ( alien_5_type_output_prev[1] !== alien_5_type_output_expected_prev[1] )
		&& ((alien_5_type_output_expected_prev[1] !== last_alien_5_type_output_exp[1]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_5_type_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_5_type_output_expected_prev);
		$display ("     Real value = %b", alien_5_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_alien_5_type_output_exp[1] = alien_5_type_output_expected_prev[1];
	end
	if (
		( alien_5_type_output_expected_prev[2] !== 1'bx ) && ( alien_5_type_output_prev[2] !== alien_5_type_output_expected_prev[2] )
		&& ((alien_5_type_output_expected_prev[2] !== last_alien_5_type_output_exp[2]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_5_type_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_5_type_output_expected_prev);
		$display ("     Real value = %b", alien_5_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_alien_5_type_output_exp[2] = alien_5_type_output_expected_prev[2];
	end
	if (
		( alien_6_angle_output_expected_prev[0] !== 1'bx ) && ( alien_6_angle_output_prev[0] !== alien_6_angle_output_expected_prev[0] )
		&& ((alien_6_angle_output_expected_prev[0] !== last_alien_6_angle_output_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_6_angle_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_6_angle_output_expected_prev);
		$display ("     Real value = %b", alien_6_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_alien_6_angle_output_exp[0] = alien_6_angle_output_expected_prev[0];
	end
	if (
		( alien_6_angle_output_expected_prev[1] !== 1'bx ) && ( alien_6_angle_output_prev[1] !== alien_6_angle_output_expected_prev[1] )
		&& ((alien_6_angle_output_expected_prev[1] !== last_alien_6_angle_output_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_6_angle_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_6_angle_output_expected_prev);
		$display ("     Real value = %b", alien_6_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_alien_6_angle_output_exp[1] = alien_6_angle_output_expected_prev[1];
	end
	if (
		( alien_6_angle_output_expected_prev[2] !== 1'bx ) && ( alien_6_angle_output_prev[2] !== alien_6_angle_output_expected_prev[2] )
		&& ((alien_6_angle_output_expected_prev[2] !== last_alien_6_angle_output_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_6_angle_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_6_angle_output_expected_prev);
		$display ("     Real value = %b", alien_6_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_alien_6_angle_output_exp[2] = alien_6_angle_output_expected_prev[2];
	end
	if (
		( alien_6_angle_output_expected_prev[3] !== 1'bx ) && ( alien_6_angle_output_prev[3] !== alien_6_angle_output_expected_prev[3] )
		&& ((alien_6_angle_output_expected_prev[3] !== last_alien_6_angle_output_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_6_angle_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_6_angle_output_expected_prev);
		$display ("     Real value = %b", alien_6_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_alien_6_angle_output_exp[3] = alien_6_angle_output_expected_prev[3];
	end
	if (
		( alien_6_can_out_expected_prev[0] !== 1'bx ) && ( alien_6_can_out_prev[0] !== alien_6_can_out_expected_prev[0] )
		&& ((alien_6_can_out_expected_prev[0] !== last_alien_6_can_out_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_6_can_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_6_can_out_expected_prev);
		$display ("     Real value = %b", alien_6_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_alien_6_can_out_exp[0] = alien_6_can_out_expected_prev[0];
	end
	if (
		( alien_6_can_out_expected_prev[1] !== 1'bx ) && ( alien_6_can_out_prev[1] !== alien_6_can_out_expected_prev[1] )
		&& ((alien_6_can_out_expected_prev[1] !== last_alien_6_can_out_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_6_can_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_6_can_out_expected_prev);
		$display ("     Real value = %b", alien_6_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_alien_6_can_out_exp[1] = alien_6_can_out_expected_prev[1];
	end
	if (
		( alien_6_can_out_expected_prev[2] !== 1'bx ) && ( alien_6_can_out_prev[2] !== alien_6_can_out_expected_prev[2] )
		&& ((alien_6_can_out_expected_prev[2] !== last_alien_6_can_out_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_6_can_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_6_can_out_expected_prev);
		$display ("     Real value = %b", alien_6_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_alien_6_can_out_exp[2] = alien_6_can_out_expected_prev[2];
	end
	if (
		( alien_6_quantization_expected_prev[0] !== 1'bx ) && ( alien_6_quantization_prev[0] !== alien_6_quantization_expected_prev[0] )
		&& ((alien_6_quantization_expected_prev[0] !== last_alien_6_quantization_exp[0]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_6_quantization[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_6_quantization_expected_prev);
		$display ("     Real value = %b", alien_6_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_alien_6_quantization_exp[0] = alien_6_quantization_expected_prev[0];
	end
	if (
		( alien_6_quantization_expected_prev[1] !== 1'bx ) && ( alien_6_quantization_prev[1] !== alien_6_quantization_expected_prev[1] )
		&& ((alien_6_quantization_expected_prev[1] !== last_alien_6_quantization_exp[1]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_6_quantization[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_6_quantization_expected_prev);
		$display ("     Real value = %b", alien_6_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_alien_6_quantization_exp[1] = alien_6_quantization_expected_prev[1];
	end
	if (
		( alien_6_quantization_expected_prev[2] !== 1'bx ) && ( alien_6_quantization_prev[2] !== alien_6_quantization_expected_prev[2] )
		&& ((alien_6_quantization_expected_prev[2] !== last_alien_6_quantization_exp[2]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_6_quantization[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_6_quantization_expected_prev);
		$display ("     Real value = %b", alien_6_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_alien_6_quantization_exp[2] = alien_6_quantization_expected_prev[2];
	end
	if (
		( alien_6_quantization_expected_prev[3] !== 1'bx ) && ( alien_6_quantization_prev[3] !== alien_6_quantization_expected_prev[3] )
		&& ((alien_6_quantization_expected_prev[3] !== last_alien_6_quantization_exp[3]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_6_quantization[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_6_quantization_expected_prev);
		$display ("     Real value = %b", alien_6_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_alien_6_quantization_exp[3] = alien_6_quantization_expected_prev[3];
	end
	if (
		( alien_6_quantization_expected_prev[4] !== 1'bx ) && ( alien_6_quantization_prev[4] !== alien_6_quantization_expected_prev[4] )
		&& ((alien_6_quantization_expected_prev[4] !== last_alien_6_quantization_exp[4]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_6_quantization[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_6_quantization_expected_prev);
		$display ("     Real value = %b", alien_6_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_alien_6_quantization_exp[4] = alien_6_quantization_expected_prev[4];
	end
	if (
		( alien_6_type_output_expected_prev[0] !== 1'bx ) && ( alien_6_type_output_prev[0] !== alien_6_type_output_expected_prev[0] )
		&& ((alien_6_type_output_expected_prev[0] !== last_alien_6_type_output_exp[0]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_6_type_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_6_type_output_expected_prev);
		$display ("     Real value = %b", alien_6_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_alien_6_type_output_exp[0] = alien_6_type_output_expected_prev[0];
	end
	if (
		( alien_6_type_output_expected_prev[1] !== 1'bx ) && ( alien_6_type_output_prev[1] !== alien_6_type_output_expected_prev[1] )
		&& ((alien_6_type_output_expected_prev[1] !== last_alien_6_type_output_exp[1]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_6_type_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_6_type_output_expected_prev);
		$display ("     Real value = %b", alien_6_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_alien_6_type_output_exp[1] = alien_6_type_output_expected_prev[1];
	end
	if (
		( alien_6_type_output_expected_prev[2] !== 1'bx ) && ( alien_6_type_output_prev[2] !== alien_6_type_output_expected_prev[2] )
		&& ((alien_6_type_output_expected_prev[2] !== last_alien_6_type_output_exp[2]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_6_type_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_6_type_output_expected_prev);
		$display ("     Real value = %b", alien_6_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_alien_6_type_output_exp[2] = alien_6_type_output_expected_prev[2];
	end
	if (
		( alien_7_angle_output_expected_prev[0] !== 1'bx ) && ( alien_7_angle_output_prev[0] !== alien_7_angle_output_expected_prev[0] )
		&& ((alien_7_angle_output_expected_prev[0] !== last_alien_7_angle_output_exp[0]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_7_angle_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_7_angle_output_expected_prev);
		$display ("     Real value = %b", alien_7_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_alien_7_angle_output_exp[0] = alien_7_angle_output_expected_prev[0];
	end
	if (
		( alien_7_angle_output_expected_prev[1] !== 1'bx ) && ( alien_7_angle_output_prev[1] !== alien_7_angle_output_expected_prev[1] )
		&& ((alien_7_angle_output_expected_prev[1] !== last_alien_7_angle_output_exp[1]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_7_angle_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_7_angle_output_expected_prev);
		$display ("     Real value = %b", alien_7_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_alien_7_angle_output_exp[1] = alien_7_angle_output_expected_prev[1];
	end
	if (
		( alien_7_angle_output_expected_prev[2] !== 1'bx ) && ( alien_7_angle_output_prev[2] !== alien_7_angle_output_expected_prev[2] )
		&& ((alien_7_angle_output_expected_prev[2] !== last_alien_7_angle_output_exp[2]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_7_angle_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_7_angle_output_expected_prev);
		$display ("     Real value = %b", alien_7_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_alien_7_angle_output_exp[2] = alien_7_angle_output_expected_prev[2];
	end
	if (
		( alien_7_angle_output_expected_prev[3] !== 1'bx ) && ( alien_7_angle_output_prev[3] !== alien_7_angle_output_expected_prev[3] )
		&& ((alien_7_angle_output_expected_prev[3] !== last_alien_7_angle_output_exp[3]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_7_angle_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_7_angle_output_expected_prev);
		$display ("     Real value = %b", alien_7_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_alien_7_angle_output_exp[3] = alien_7_angle_output_expected_prev[3];
	end
	if (
		( alien_7_can_out_expected_prev[0] !== 1'bx ) && ( alien_7_can_out_prev[0] !== alien_7_can_out_expected_prev[0] )
		&& ((alien_7_can_out_expected_prev[0] !== last_alien_7_can_out_exp[0]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_7_can_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_7_can_out_expected_prev);
		$display ("     Real value = %b", alien_7_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_alien_7_can_out_exp[0] = alien_7_can_out_expected_prev[0];
	end
	if (
		( alien_7_can_out_expected_prev[1] !== 1'bx ) && ( alien_7_can_out_prev[1] !== alien_7_can_out_expected_prev[1] )
		&& ((alien_7_can_out_expected_prev[1] !== last_alien_7_can_out_exp[1]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_7_can_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_7_can_out_expected_prev);
		$display ("     Real value = %b", alien_7_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_alien_7_can_out_exp[1] = alien_7_can_out_expected_prev[1];
	end
	if (
		( alien_7_can_out_expected_prev[2] !== 1'bx ) && ( alien_7_can_out_prev[2] !== alien_7_can_out_expected_prev[2] )
		&& ((alien_7_can_out_expected_prev[2] !== last_alien_7_can_out_exp[2]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_7_can_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_7_can_out_expected_prev);
		$display ("     Real value = %b", alien_7_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_alien_7_can_out_exp[2] = alien_7_can_out_expected_prev[2];
	end
	if (
		( alien_7_quantization_expected_prev[0] !== 1'bx ) && ( alien_7_quantization_prev[0] !== alien_7_quantization_expected_prev[0] )
		&& ((alien_7_quantization_expected_prev[0] !== last_alien_7_quantization_exp[0]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_7_quantization[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_7_quantization_expected_prev);
		$display ("     Real value = %b", alien_7_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_alien_7_quantization_exp[0] = alien_7_quantization_expected_prev[0];
	end
	if (
		( alien_7_quantization_expected_prev[1] !== 1'bx ) && ( alien_7_quantization_prev[1] !== alien_7_quantization_expected_prev[1] )
		&& ((alien_7_quantization_expected_prev[1] !== last_alien_7_quantization_exp[1]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_7_quantization[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_7_quantization_expected_prev);
		$display ("     Real value = %b", alien_7_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_alien_7_quantization_exp[1] = alien_7_quantization_expected_prev[1];
	end
	if (
		( alien_7_quantization_expected_prev[2] !== 1'bx ) && ( alien_7_quantization_prev[2] !== alien_7_quantization_expected_prev[2] )
		&& ((alien_7_quantization_expected_prev[2] !== last_alien_7_quantization_exp[2]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_7_quantization[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_7_quantization_expected_prev);
		$display ("     Real value = %b", alien_7_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_alien_7_quantization_exp[2] = alien_7_quantization_expected_prev[2];
	end
	if (
		( alien_7_quantization_expected_prev[3] !== 1'bx ) && ( alien_7_quantization_prev[3] !== alien_7_quantization_expected_prev[3] )
		&& ((alien_7_quantization_expected_prev[3] !== last_alien_7_quantization_exp[3]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_7_quantization[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_7_quantization_expected_prev);
		$display ("     Real value = %b", alien_7_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_alien_7_quantization_exp[3] = alien_7_quantization_expected_prev[3];
	end
	if (
		( alien_7_quantization_expected_prev[4] !== 1'bx ) && ( alien_7_quantization_prev[4] !== alien_7_quantization_expected_prev[4] )
		&& ((alien_7_quantization_expected_prev[4] !== last_alien_7_quantization_exp[4]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_7_quantization[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_7_quantization_expected_prev);
		$display ("     Real value = %b", alien_7_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_alien_7_quantization_exp[4] = alien_7_quantization_expected_prev[4];
	end
	if (
		( alien_7_type_output_expected_prev[0] !== 1'bx ) && ( alien_7_type_output_prev[0] !== alien_7_type_output_expected_prev[0] )
		&& ((alien_7_type_output_expected_prev[0] !== last_alien_7_type_output_exp[0]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_7_type_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_7_type_output_expected_prev);
		$display ("     Real value = %b", alien_7_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_alien_7_type_output_exp[0] = alien_7_type_output_expected_prev[0];
	end
	if (
		( alien_7_type_output_expected_prev[1] !== 1'bx ) && ( alien_7_type_output_prev[1] !== alien_7_type_output_expected_prev[1] )
		&& ((alien_7_type_output_expected_prev[1] !== last_alien_7_type_output_exp[1]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_7_type_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_7_type_output_expected_prev);
		$display ("     Real value = %b", alien_7_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_alien_7_type_output_exp[1] = alien_7_type_output_expected_prev[1];
	end
	if (
		( alien_7_type_output_expected_prev[2] !== 1'bx ) && ( alien_7_type_output_prev[2] !== alien_7_type_output_expected_prev[2] )
		&& ((alien_7_type_output_expected_prev[2] !== last_alien_7_type_output_exp[2]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_7_type_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_7_type_output_expected_prev);
		$display ("     Real value = %b", alien_7_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_alien_7_type_output_exp[2] = alien_7_type_output_expected_prev[2];
	end
	if (
		( alien_8_angle_output_expected_prev[0] !== 1'bx ) && ( alien_8_angle_output_prev[0] !== alien_8_angle_output_expected_prev[0] )
		&& ((alien_8_angle_output_expected_prev[0] !== last_alien_8_angle_output_exp[0]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_8_angle_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_8_angle_output_expected_prev);
		$display ("     Real value = %b", alien_8_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_alien_8_angle_output_exp[0] = alien_8_angle_output_expected_prev[0];
	end
	if (
		( alien_8_angle_output_expected_prev[1] !== 1'bx ) && ( alien_8_angle_output_prev[1] !== alien_8_angle_output_expected_prev[1] )
		&& ((alien_8_angle_output_expected_prev[1] !== last_alien_8_angle_output_exp[1]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_8_angle_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_8_angle_output_expected_prev);
		$display ("     Real value = %b", alien_8_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_alien_8_angle_output_exp[1] = alien_8_angle_output_expected_prev[1];
	end
	if (
		( alien_8_angle_output_expected_prev[2] !== 1'bx ) && ( alien_8_angle_output_prev[2] !== alien_8_angle_output_expected_prev[2] )
		&& ((alien_8_angle_output_expected_prev[2] !== last_alien_8_angle_output_exp[2]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_8_angle_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_8_angle_output_expected_prev);
		$display ("     Real value = %b", alien_8_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_alien_8_angle_output_exp[2] = alien_8_angle_output_expected_prev[2];
	end
	if (
		( alien_8_angle_output_expected_prev[3] !== 1'bx ) && ( alien_8_angle_output_prev[3] !== alien_8_angle_output_expected_prev[3] )
		&& ((alien_8_angle_output_expected_prev[3] !== last_alien_8_angle_output_exp[3]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_8_angle_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_8_angle_output_expected_prev);
		$display ("     Real value = %b", alien_8_angle_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_alien_8_angle_output_exp[3] = alien_8_angle_output_expected_prev[3];
	end
	if (
		( alien_8_can_out_expected_prev[0] !== 1'bx ) && ( alien_8_can_out_prev[0] !== alien_8_can_out_expected_prev[0] )
		&& ((alien_8_can_out_expected_prev[0] !== last_alien_8_can_out_exp[0]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_8_can_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_8_can_out_expected_prev);
		$display ("     Real value = %b", alien_8_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_alien_8_can_out_exp[0] = alien_8_can_out_expected_prev[0];
	end
	if (
		( alien_8_can_out_expected_prev[1] !== 1'bx ) && ( alien_8_can_out_prev[1] !== alien_8_can_out_expected_prev[1] )
		&& ((alien_8_can_out_expected_prev[1] !== last_alien_8_can_out_exp[1]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_8_can_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_8_can_out_expected_prev);
		$display ("     Real value = %b", alien_8_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_alien_8_can_out_exp[1] = alien_8_can_out_expected_prev[1];
	end
	if (
		( alien_8_can_out_expected_prev[2] !== 1'bx ) && ( alien_8_can_out_prev[2] !== alien_8_can_out_expected_prev[2] )
		&& ((alien_8_can_out_expected_prev[2] !== last_alien_8_can_out_exp[2]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_8_can_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_8_can_out_expected_prev);
		$display ("     Real value = %b", alien_8_can_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_alien_8_can_out_exp[2] = alien_8_can_out_expected_prev[2];
	end
	if (
		( alien_8_quantization_expected_prev[0] !== 1'bx ) && ( alien_8_quantization_prev[0] !== alien_8_quantization_expected_prev[0] )
		&& ((alien_8_quantization_expected_prev[0] !== last_alien_8_quantization_exp[0]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_8_quantization[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_8_quantization_expected_prev);
		$display ("     Real value = %b", alien_8_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_alien_8_quantization_exp[0] = alien_8_quantization_expected_prev[0];
	end
	if (
		( alien_8_quantization_expected_prev[1] !== 1'bx ) && ( alien_8_quantization_prev[1] !== alien_8_quantization_expected_prev[1] )
		&& ((alien_8_quantization_expected_prev[1] !== last_alien_8_quantization_exp[1]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_8_quantization[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_8_quantization_expected_prev);
		$display ("     Real value = %b", alien_8_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_alien_8_quantization_exp[1] = alien_8_quantization_expected_prev[1];
	end
	if (
		( alien_8_quantization_expected_prev[2] !== 1'bx ) && ( alien_8_quantization_prev[2] !== alien_8_quantization_expected_prev[2] )
		&& ((alien_8_quantization_expected_prev[2] !== last_alien_8_quantization_exp[2]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_8_quantization[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_8_quantization_expected_prev);
		$display ("     Real value = %b", alien_8_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_alien_8_quantization_exp[2] = alien_8_quantization_expected_prev[2];
	end
	if (
		( alien_8_quantization_expected_prev[3] !== 1'bx ) && ( alien_8_quantization_prev[3] !== alien_8_quantization_expected_prev[3] )
		&& ((alien_8_quantization_expected_prev[3] !== last_alien_8_quantization_exp[3]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_8_quantization[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_8_quantization_expected_prev);
		$display ("     Real value = %b", alien_8_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_alien_8_quantization_exp[3] = alien_8_quantization_expected_prev[3];
	end
	if (
		( alien_8_quantization_expected_prev[4] !== 1'bx ) && ( alien_8_quantization_prev[4] !== alien_8_quantization_expected_prev[4] )
		&& ((alien_8_quantization_expected_prev[4] !== last_alien_8_quantization_exp[4]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_8_quantization[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_8_quantization_expected_prev);
		$display ("     Real value = %b", alien_8_quantization_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_alien_8_quantization_exp[4] = alien_8_quantization_expected_prev[4];
	end
	if (
		( alien_8_type_output_expected_prev[0] !== 1'bx ) && ( alien_8_type_output_prev[0] !== alien_8_type_output_expected_prev[0] )
		&& ((alien_8_type_output_expected_prev[0] !== last_alien_8_type_output_exp[0]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_8_type_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_8_type_output_expected_prev);
		$display ("     Real value = %b", alien_8_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_alien_8_type_output_exp[0] = alien_8_type_output_expected_prev[0];
	end
	if (
		( alien_8_type_output_expected_prev[1] !== 1'bx ) && ( alien_8_type_output_prev[1] !== alien_8_type_output_expected_prev[1] )
		&& ((alien_8_type_output_expected_prev[1] !== last_alien_8_type_output_exp[1]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_8_type_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_8_type_output_expected_prev);
		$display ("     Real value = %b", alien_8_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_alien_8_type_output_exp[1] = alien_8_type_output_expected_prev[1];
	end
	if (
		( alien_8_type_output_expected_prev[2] !== 1'bx ) && ( alien_8_type_output_prev[2] !== alien_8_type_output_expected_prev[2] )
		&& ((alien_8_type_output_expected_prev[2] !== last_alien_8_type_output_exp[2]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_8_type_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_8_type_output_expected_prev);
		$display ("     Real value = %b", alien_8_type_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_alien_8_type_output_exp[2] = alien_8_type_output_expected_prev[2];
	end
	if (
		( alien_alive_dead_expected_prev[0] !== 1'bx ) && ( alien_alive_dead_prev[0] !== alien_alive_dead_expected_prev[0] )
		&& ((alien_alive_dead_expected_prev[0] !== last_alien_alive_dead_exp[0]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_alive_dead[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_alive_dead_expected_prev);
		$display ("     Real value = %b", alien_alive_dead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_alien_alive_dead_exp[0] = alien_alive_dead_expected_prev[0];
	end
	if (
		( alien_alive_dead_expected_prev[1] !== 1'bx ) && ( alien_alive_dead_prev[1] !== alien_alive_dead_expected_prev[1] )
		&& ((alien_alive_dead_expected_prev[1] !== last_alien_alive_dead_exp[1]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_alive_dead[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_alive_dead_expected_prev);
		$display ("     Real value = %b", alien_alive_dead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_alien_alive_dead_exp[1] = alien_alive_dead_expected_prev[1];
	end
	if (
		( alien_alive_dead_expected_prev[2] !== 1'bx ) && ( alien_alive_dead_prev[2] !== alien_alive_dead_expected_prev[2] )
		&& ((alien_alive_dead_expected_prev[2] !== last_alien_alive_dead_exp[2]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_alive_dead[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_alive_dead_expected_prev);
		$display ("     Real value = %b", alien_alive_dead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_alien_alive_dead_exp[2] = alien_alive_dead_expected_prev[2];
	end
	if (
		( alien_alive_dead_expected_prev[3] !== 1'bx ) && ( alien_alive_dead_prev[3] !== alien_alive_dead_expected_prev[3] )
		&& ((alien_alive_dead_expected_prev[3] !== last_alien_alive_dead_exp[3]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_alive_dead[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_alive_dead_expected_prev);
		$display ("     Real value = %b", alien_alive_dead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_alien_alive_dead_exp[3] = alien_alive_dead_expected_prev[3];
	end
	if (
		( alien_alive_dead_expected_prev[4] !== 1'bx ) && ( alien_alive_dead_prev[4] !== alien_alive_dead_expected_prev[4] )
		&& ((alien_alive_dead_expected_prev[4] !== last_alien_alive_dead_exp[4]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_alive_dead[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_alive_dead_expected_prev);
		$display ("     Real value = %b", alien_alive_dead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_alien_alive_dead_exp[4] = alien_alive_dead_expected_prev[4];
	end
	if (
		( alien_alive_dead_expected_prev[5] !== 1'bx ) && ( alien_alive_dead_prev[5] !== alien_alive_dead_expected_prev[5] )
		&& ((alien_alive_dead_expected_prev[5] !== last_alien_alive_dead_exp[5]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_alive_dead[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_alive_dead_expected_prev);
		$display ("     Real value = %b", alien_alive_dead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_alien_alive_dead_exp[5] = alien_alive_dead_expected_prev[5];
	end
	if (
		( alien_alive_dead_expected_prev[6] !== 1'bx ) && ( alien_alive_dead_prev[6] !== alien_alive_dead_expected_prev[6] )
		&& ((alien_alive_dead_expected_prev[6] !== last_alien_alive_dead_exp[6]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_alive_dead[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_alive_dead_expected_prev);
		$display ("     Real value = %b", alien_alive_dead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_alien_alive_dead_exp[6] = alien_alive_dead_expected_prev[6];
	end
	if (
		( alien_alive_dead_expected_prev[7] !== 1'bx ) && ( alien_alive_dead_prev[7] !== alien_alive_dead_expected_prev[7] )
		&& ((alien_alive_dead_expected_prev[7] !== last_alien_alive_dead_exp[7]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alien_alive_dead[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alien_alive_dead_expected_prev);
		$display ("     Real value = %b", alien_alive_dead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_alien_alive_dead_exp[7] = alien_alive_dead_expected_prev[7];
	end
	if (
		( game_over_expected_prev !== 1'bx ) && ( game_over_prev !== game_over_expected_prev )
		&& ((game_over_expected_prev !== last_game_over_exp) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port game_over :: @time = %t",  $realtime);
		$display ("     Expected value = %b", game_over_expected_prev);
		$display ("     Real value = %b", game_over_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_game_over_exp = game_over_expected_prev;
	end
	if (
		( rocket_angle_expected_prev[0] !== 1'bx ) && ( rocket_angle_prev[0] !== rocket_angle_expected_prev[0] )
		&& ((rocket_angle_expected_prev[0] !== last_rocket_angle_exp[0]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rocket_angle[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rocket_angle_expected_prev);
		$display ("     Real value = %b", rocket_angle_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_rocket_angle_exp[0] = rocket_angle_expected_prev[0];
	end
	if (
		( rocket_angle_expected_prev[1] !== 1'bx ) && ( rocket_angle_prev[1] !== rocket_angle_expected_prev[1] )
		&& ((rocket_angle_expected_prev[1] !== last_rocket_angle_exp[1]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rocket_angle[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rocket_angle_expected_prev);
		$display ("     Real value = %b", rocket_angle_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_rocket_angle_exp[1] = rocket_angle_expected_prev[1];
	end
	if (
		( rocket_angle_expected_prev[2] !== 1'bx ) && ( rocket_angle_prev[2] !== rocket_angle_expected_prev[2] )
		&& ((rocket_angle_expected_prev[2] !== last_rocket_angle_exp[2]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rocket_angle[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rocket_angle_expected_prev);
		$display ("     Real value = %b", rocket_angle_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_rocket_angle_exp[2] = rocket_angle_expected_prev[2];
	end
	if (
		( rocket_angle_expected_prev[3] !== 1'bx ) && ( rocket_angle_prev[3] !== rocket_angle_expected_prev[3] )
		&& ((rocket_angle_expected_prev[3] !== last_rocket_angle_exp[3]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rocket_angle[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rocket_angle_expected_prev);
		$display ("     Real value = %b", rocket_angle_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_rocket_angle_exp[3] = rocket_angle_expected_prev[3];
	end
	if (
		( sample_total_expected_prev[0] !== 1'bx ) && ( sample_total_prev[0] !== sample_total_expected_prev[0] )
		&& ((sample_total_expected_prev[0] !== last_sample_total_exp[0]) ||
			on_first_change[36])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sample_total[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sample_total_expected_prev);
		$display ("     Real value = %b", sample_total_prev);
		nummismatches = nummismatches + 1;
		on_first_change[36] = 1'b0;
		last_sample_total_exp[0] = sample_total_expected_prev[0];
	end
	if (
		( sample_total_expected_prev[1] !== 1'bx ) && ( sample_total_prev[1] !== sample_total_expected_prev[1] )
		&& ((sample_total_expected_prev[1] !== last_sample_total_exp[1]) ||
			on_first_change[36])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sample_total[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sample_total_expected_prev);
		$display ("     Real value = %b", sample_total_prev);
		nummismatches = nummismatches + 1;
		on_first_change[36] = 1'b0;
		last_sample_total_exp[1] = sample_total_expected_prev[1];
	end
	if (
		( sample_total_expected_prev[2] !== 1'bx ) && ( sample_total_prev[2] !== sample_total_expected_prev[2] )
		&& ((sample_total_expected_prev[2] !== last_sample_total_exp[2]) ||
			on_first_change[36])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sample_total[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sample_total_expected_prev);
		$display ("     Real value = %b", sample_total_prev);
		nummismatches = nummismatches + 1;
		on_first_change[36] = 1'b0;
		last_sample_total_exp[2] = sample_total_expected_prev[2];
	end
	if (
		( score_expected_prev[0] !== 1'bx ) && ( score_prev[0] !== score_expected_prev[0] )
		&& ((score_expected_prev[0] !== last_score_exp[0]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port score[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", score_expected_prev);
		$display ("     Real value = %b", score_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_score_exp[0] = score_expected_prev[0];
	end
	if (
		( score_expected_prev[1] !== 1'bx ) && ( score_prev[1] !== score_expected_prev[1] )
		&& ((score_expected_prev[1] !== last_score_exp[1]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port score[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", score_expected_prev);
		$display ("     Real value = %b", score_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_score_exp[1] = score_expected_prev[1];
	end
	if (
		( score_expected_prev[2] !== 1'bx ) && ( score_prev[2] !== score_expected_prev[2] )
		&& ((score_expected_prev[2] !== last_score_exp[2]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port score[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", score_expected_prev);
		$display ("     Real value = %b", score_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_score_exp[2] = score_expected_prev[2];
	end
	if (
		( score_expected_prev[3] !== 1'bx ) && ( score_prev[3] !== score_expected_prev[3] )
		&& ((score_expected_prev[3] !== last_score_exp[3]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port score[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", score_expected_prev);
		$display ("     Real value = %b", score_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_score_exp[3] = score_expected_prev[3];
	end
	if (
		( score_expected_prev[4] !== 1'bx ) && ( score_prev[4] !== score_expected_prev[4] )
		&& ((score_expected_prev[4] !== last_score_exp[4]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port score[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", score_expected_prev);
		$display ("     Real value = %b", score_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_score_exp[4] = score_expected_prev[4];
	end
	if (
		( score_expected_prev[5] !== 1'bx ) && ( score_prev[5] !== score_expected_prev[5] )
		&& ((score_expected_prev[5] !== last_score_exp[5]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port score[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", score_expected_prev);
		$display ("     Real value = %b", score_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_score_exp[5] = score_expected_prev[5];
	end
	if (
		( score_expected_prev[6] !== 1'bx ) && ( score_prev[6] !== score_expected_prev[6] )
		&& ((score_expected_prev[6] !== last_score_exp[6]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port score[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", score_expected_prev);
		$display ("     Real value = %b", score_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_score_exp[6] = score_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module dynamics_top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock_fpga;
reg [1:0] level;
reg reset;
reg shift_minus;
reg shift_plus;
reg shoot;
reg [1:0] shoot_type;
// wires                                               
wire [3:0] alien_1_angle_output;
wire [2:0] alien_1_can_out;
wire [4:0] alien_1_quantization;
wire [2:0] alien_1_type_output;
wire [3:0] alien_2_angle_output;
wire [2:0] alien_2_can_out;
wire [4:0] alien_2_quantization;
wire [2:0] alien_2_type_output;
wire [3:0] alien_3_angle_output;
wire [2:0] alien_3_can_out;
wire [4:0] alien_3_quantization;
wire [2:0] alien_3_type_output;
wire [3:0] alien_4_angle_output;
wire [2:0] alien_4_can_out;
wire [4:0] alien_4_quantization;
wire [2:0] alien_4_type_output;
wire [3:0] alien_5_angle_output;
wire [2:0] alien_5_can_out;
wire [4:0] alien_5_quantization;
wire [2:0] alien_5_type_output;
wire [3:0] alien_6_angle_output;
wire [2:0] alien_6_can_out;
wire [4:0] alien_6_quantization;
wire [2:0] alien_6_type_output;
wire [3:0] alien_7_angle_output;
wire [2:0] alien_7_can_out;
wire [4:0] alien_7_quantization;
wire [2:0] alien_7_type_output;
wire [3:0] alien_8_angle_output;
wire [2:0] alien_8_can_out;
wire [4:0] alien_8_quantization;
wire [2:0] alien_8_type_output;
wire [7:0] alien_alive_dead;
wire game_over;
wire [3:0] rocket_angle;
wire [2:0] sample_total;
wire [6:0] score;

wire sampler;                             

// assign statements (if any)                          
dynamics_top i1 (
// port map - connection between master ports and signals/registers   
	.alien_1_angle_output(alien_1_angle_output),
	.alien_1_can_out(alien_1_can_out),
	.alien_1_quantization(alien_1_quantization),
	.alien_1_type_output(alien_1_type_output),
	.alien_2_angle_output(alien_2_angle_output),
	.alien_2_can_out(alien_2_can_out),
	.alien_2_quantization(alien_2_quantization),
	.alien_2_type_output(alien_2_type_output),
	.alien_3_angle_output(alien_3_angle_output),
	.alien_3_can_out(alien_3_can_out),
	.alien_3_quantization(alien_3_quantization),
	.alien_3_type_output(alien_3_type_output),
	.alien_4_angle_output(alien_4_angle_output),
	.alien_4_can_out(alien_4_can_out),
	.alien_4_quantization(alien_4_quantization),
	.alien_4_type_output(alien_4_type_output),
	.alien_5_angle_output(alien_5_angle_output),
	.alien_5_can_out(alien_5_can_out),
	.alien_5_quantization(alien_5_quantization),
	.alien_5_type_output(alien_5_type_output),
	.alien_6_angle_output(alien_6_angle_output),
	.alien_6_can_out(alien_6_can_out),
	.alien_6_quantization(alien_6_quantization),
	.alien_6_type_output(alien_6_type_output),
	.alien_7_angle_output(alien_7_angle_output),
	.alien_7_can_out(alien_7_can_out),
	.alien_7_quantization(alien_7_quantization),
	.alien_7_type_output(alien_7_type_output),
	.alien_8_angle_output(alien_8_angle_output),
	.alien_8_can_out(alien_8_can_out),
	.alien_8_quantization(alien_8_quantization),
	.alien_8_type_output(alien_8_type_output),
	.alien_alive_dead(alien_alive_dead),
	.clock_fpga(clock_fpga),
	.game_over(game_over),
	.level(level),
	.reset(reset),
	.rocket_angle(rocket_angle),
	.sample_total(sample_total),
	.score(score),
	.shift_minus(shift_minus),
	.shift_plus(shift_plus),
	.shoot(shoot),
	.shoot_type(shoot_type)
);

// clock_fpga
always
begin
	clock_fpga = 1'b0;
	clock_fpga = #5000 1'b1;
	#5000;
end 
// level[ 1 ]
initial
begin
	level[1] = 1'b0;
end 
// level[ 0 ]
initial
begin
	level[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// shift_minus
initial
begin
	shift_minus = 1'b1;
end 

// shift_plus
initial
begin
	shift_plus = 1'b0;
end 

// shoot
initial
begin
	shoot = 1'b0;
end 
// shoot_type[ 1 ]
initial
begin
	shoot_type[1] = 1'b0;
end 
// shoot_type[ 0 ]
initial
begin
	shoot_type[0] = 1'b0;
end 

dynamics_top_vlg_sample_tst tb_sample (
	.clock_fpga(clock_fpga),
	.level(level),
	.reset(reset),
	.shift_minus(shift_minus),
	.shift_plus(shift_plus),
	.shoot(shoot),
	.shoot_type(shoot_type),
	.sampler_tx(sampler)
);

dynamics_top_vlg_check_tst tb_out(
	.alien_1_angle_output(alien_1_angle_output),
	.alien_1_can_out(alien_1_can_out),
	.alien_1_quantization(alien_1_quantization),
	.alien_1_type_output(alien_1_type_output),
	.alien_2_angle_output(alien_2_angle_output),
	.alien_2_can_out(alien_2_can_out),
	.alien_2_quantization(alien_2_quantization),
	.alien_2_type_output(alien_2_type_output),
	.alien_3_angle_output(alien_3_angle_output),
	.alien_3_can_out(alien_3_can_out),
	.alien_3_quantization(alien_3_quantization),
	.alien_3_type_output(alien_3_type_output),
	.alien_4_angle_output(alien_4_angle_output),
	.alien_4_can_out(alien_4_can_out),
	.alien_4_quantization(alien_4_quantization),
	.alien_4_type_output(alien_4_type_output),
	.alien_5_angle_output(alien_5_angle_output),
	.alien_5_can_out(alien_5_can_out),
	.alien_5_quantization(alien_5_quantization),
	.alien_5_type_output(alien_5_type_output),
	.alien_6_angle_output(alien_6_angle_output),
	.alien_6_can_out(alien_6_can_out),
	.alien_6_quantization(alien_6_quantization),
	.alien_6_type_output(alien_6_type_output),
	.alien_7_angle_output(alien_7_angle_output),
	.alien_7_can_out(alien_7_can_out),
	.alien_7_quantization(alien_7_quantization),
	.alien_7_type_output(alien_7_type_output),
	.alien_8_angle_output(alien_8_angle_output),
	.alien_8_can_out(alien_8_can_out),
	.alien_8_quantization(alien_8_quantization),
	.alien_8_type_output(alien_8_type_output),
	.alien_alive_dead(alien_alive_dead),
	.game_over(game_over),
	.rocket_angle(rocket_angle),
	.sample_total(sample_total),
	.score(score),
	.sampler_rx(sampler)
);
endmodule

